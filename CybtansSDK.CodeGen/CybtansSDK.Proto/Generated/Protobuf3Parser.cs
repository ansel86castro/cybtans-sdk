//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Protobuf3.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using CybtansSdk.Proto.AST;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class Protobuf3Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, Ident=37, IntLit=38, 
		FloatLit=39, BoolLit=40, StrLit=41, Quote=42, WS=43, COMMENT=44, LINE_COMMENT=45;
	public const int
		RULE_proto = 0, RULE_syntax = 1, RULE_importStatement = 2, RULE_packageStatement = 3, 
		RULE_option = 4, RULE_optionName = 5, RULE_optionBody = 6, RULE_optionBodyVariable = 7, 
		RULE_topLevelDef = 8, RULE_message = 9, RULE_enumDefinition = 10, RULE_enumField = 11, 
		RULE_service = 12, RULE_rpc = 13, RULE_reserved = 14, RULE_ranges = 15, 
		RULE_range = 16, RULE_fieldNames = 17, RULE_fullIdent = 18, RULE_emptyStatement = 19, 
		RULE_constant = 20, RULE_type = 21, RULE_field = 22, RULE_fieldOptions = 23, 
		RULE_fieldOption = 24, RULE_oneof = 25, RULE_oneofField = 26, RULE_mapField = 27, 
		RULE_messageName = 28, RULE_fieldName = 29, RULE_oneofName = 30, RULE_messageType = 31;
	public static readonly string[] ruleNames = {
		"proto", "syntax", "importStatement", "packageStatement", "option", "optionName", 
		"optionBody", "optionBodyVariable", "topLevelDef", "message", "enumDefinition", 
		"enumField", "service", "rpc", "reserved", "ranges", "range", "fieldNames", 
		"fullIdent", "emptyStatement", "constant", "type", "field", "fieldOptions", 
		"fieldOption", "oneof", "oneofField", "mapField", "messageName", "fieldName", 
		"oneofName", "messageType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'syntax'", "'='", "'\"proto3\"'", "''proto3''", "';'", "'import'", 
		"'weak'", "'public'", "'package'", "'option'", "'('", "')'", "'.'", "'{'", 
		"'}'", "':'", "'message'", "'enum'", "'-'", "'['", "']'", "'service'", 
		"'rpc'", "'stream'", "'returns'", "'reserved'", "','", "'to'", "'+'", 
		"'true'", "'false'", "'repeated'", "'oneof'", "'map'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Ident", "IntLit", "FloatLit", "BoolLit", "StrLit", "Quote", "WS", 
		"COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Protobuf3.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Protobuf3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}




		public Protobuf3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Protobuf3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProtoContext : ParserRuleContext {
		public ProtoFile file = new ProtoFile();
		public ImportStatementContext _importStatement;
		public PackageStatementContext _packageStatement;
		public OptionContext _option;
		public TopLevelDefContext _topLevelDef;
		public SyntaxContext syntax() {
			return GetRuleContext<SyntaxContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(Protobuf3Parser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public PackageStatementContext[] packageStatement() {
			return GetRuleContexts<PackageStatementContext>();
		}
		public PackageStatementContext packageStatement(int i) {
			return GetRuleContext<PackageStatementContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public TopLevelDefContext[] topLevelDef() {
			return GetRuleContexts<TopLevelDefContext>();
		}
		public TopLevelDefContext topLevelDef(int i) {
			return GetRuleContext<TopLevelDefContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public ProtoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proto; } }
	}

	[RuleVersion(0)]
	public ProtoContext proto() {
		ProtoContext _localctx = new ProtoContext(Context, State);
		EnterRule(_localctx, 0, RULE_proto);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; syntax();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << T__16) | (1L << T__17) | (1L << T__21))) != 0)) {
				{
				State = 78;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__5:
					{
					State = 65; _localctx._importStatement = importStatement();
					_localctx.file.Imports.Add(_localctx._importStatement.node);
					}
					break;
				case T__8:
					{
					State = 68; _localctx._packageStatement = packageStatement();
					_localctx.file.Package=_localctx._packageStatement.node;
					}
					break;
				case T__9:
					{
					State = 71; _localctx._option = option();
					_localctx.file.Options.Add(_localctx._option.node);
					}
					break;
				case T__16:
				case T__17:
				case T__21:
					{
					State = 74; _localctx._topLevelDef = topLevelDef();
					_localctx.file.Declarations.Add(_localctx._topLevelDef.node);
					}
					break;
				case T__4:
					{
					State = 77; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxContext : ParserRuleContext {
		public SyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntax; } }
	}

	[RuleVersion(0)]
	public SyntaxContext syntax() {
		SyntaxContext _localctx = new SyntaxContext(Context, State);
		EnterRule(_localctx, 2, RULE_syntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__0);
			State = 86; Match(T__1);
			State = 87;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 88; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ImportDeclaration node;
		public IToken w;
		public IToken p;
		public IToken v;
		public ITerminalNode StrLit() { return GetToken(Protobuf3Parser.StrLit, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__5);
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				{
				State = 91; _localctx.w = Match(T__6);
				}
				break;
			case T__7:
				{
				State = 92; _localctx.p = Match(T__7);
				}
				break;
			case StrLit:
				break;
			default:
				break;
			}
			State = 95; _localctx.v = Match(StrLit);
			State = 96; Match(T__4);
			_localctx.node =  new ImportDeclaration(_localctx.Start, _localctx.w != null?ImportType.Weak:ImportType.Public, (_localctx.v!=null?_localctx.v.Text:null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageStatementContext : ParserRuleContext {
		public PackageDeclaration node;
		public FullIdentContext id;
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public PackageStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageStatement; } }
	}

	[RuleVersion(0)]
	public PackageStatementContext packageStatement() {
		PackageStatementContext _localctx = new PackageStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_packageStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(T__8);
			State = 100; _localctx.id = fullIdent();
			State = 101; Match(T__4);
			 _localctx.node =  new PackageDeclaration((_localctx.id!=null?(_localctx.id.Start):null), _localctx.id.node);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public OptionsExpression node;
		public ExpressionNode e;
		public OptionNameContext id;
		public ConstantContext _constant;
		public OptionBodyContext _optionBody;
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public OptionBodyContext optionBody() {
			return GetRuleContext<OptionBodyContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__9);
			State = 105; _localctx.id = optionName();
			State = 106; Match(T__1);
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
			case T__28:
			case T__29:
			case T__30:
			case IntLit:
			case FloatLit:
			case StrLit:
				{
				State = 107; _localctx._constant = constant();
				 _localctx.e = _localctx._constant.node;
				}
				break;
			case T__13:
				{
				State = 110; _localctx._optionBody = optionBody();
				_localctx.e =  _localctx._optionBody.node;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 115; Match(T__4);
			_localctx.node =  new OptionsExpression(_localctx.id.node, _localctx.e, _localctx.Start);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionNameContext : ParserRuleContext {
		public IdentifierExpression node;
		public IToken id;
		public FullIdentContext _fullIdent;
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public OptionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionName; } }
	}

	[RuleVersion(0)]
	public OptionNameContext optionName() {
		OptionNameContext _localctx = new OptionNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_optionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ident:
				{
				State = 118; _localctx.id = Match(Ident);
				 _localctx.node =  new OptionIdentifierExpression((_localctx.id!=null?_localctx.id.Text:null), null, _localctx.Start); 
				}
				break;
			case T__10:
				{
				State = 120; Match(T__10);
				State = 121; _localctx._fullIdent = fullIdent();
				 
				              var n = new OptionIdentifierExpression(_localctx._fullIdent.node.Id, _localctx._fullIdent.node.Left, _localctx.Start );
				              n.IsExtension = true;
				              _localctx.node =  n;
				              
				State = 123; Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 127; Match(T__12);
				{
				State = 128; _localctx.id = Match(Ident);
				 _localctx.node =  new OptionIdentifierExpression((_localctx.id!=null?_localctx.id.Text:null), _localctx.node, _localctx.id); 
				}
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionBodyContext : ParserRuleContext {
		public InitializerExp node;
		public OptionBodyVariableContext e;
		public OptionBodyVariableContext[] optionBodyVariable() {
			return GetRuleContexts<OptionBodyVariableContext>();
		}
		public OptionBodyVariableContext optionBodyVariable(int i) {
			return GetRuleContext<OptionBodyVariableContext>(i);
		}
		public OptionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionBody; } }
	}

	[RuleVersion(0)]
	public OptionBodyContext optionBody() {
		OptionBodyContext _localctx = new OptionBodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_optionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(T__13);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Ident) {
				{
				{
				State = 136; _localctx.e = optionBodyVariable();
				 
				            _localctx.node =  _localctx.node??new InitializerExp(_localctx.Start); 
				            _localctx.node.Expressions.Add(_localctx.e.node); 
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionBodyVariableContext : ParserRuleContext {
		public MemberInitializerExp node;
		public IToken id;
		public ConstantContext e;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public OptionBodyVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionBodyVariable; } }
	}

	[RuleVersion(0)]
	public OptionBodyVariableContext optionBodyVariable() {
		OptionBodyVariableContext _localctx = new OptionBodyVariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_optionBodyVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; _localctx.id = Match(Ident);
			State = 147; Match(T__15);
			State = 148; _localctx.e = constant();
			_localctx.node =  new MemberInitializerExp(_localctx.Start,(_localctx.id!=null?_localctx.id.Text:null), _localctx.e.node);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefContext : ParserRuleContext {
		public DeclarationNode node;
		public MessageContext _message;
		public EnumDefinitionContext _enumDefinition;
		public ServiceContext _service;
		public MessageContext message() {
			return GetRuleContext<MessageContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ServiceContext service() {
			return GetRuleContext<ServiceContext>(0);
		}
		public TopLevelDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDef; } }
	}

	[RuleVersion(0)]
	public TopLevelDefContext topLevelDef() {
		TopLevelDefContext _localctx = new TopLevelDefContext(Context, State);
		EnterRule(_localctx, 16, RULE_topLevelDef);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; _localctx._message = message();
				_localctx.node =  _localctx._message.node;
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; _localctx._enumDefinition = enumDefinition();
				_localctx.node =  _localctx._enumDefinition.node; 
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 3);
				{
				State = 157; _localctx._service = service();
				_localctx.node =  _localctx._service.node;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageContext : ParserRuleContext {
		public MessageDeclaration node;
		public MessageNameContext _messageName;
		public EnumDefinitionContext e;
		public MessageContext m;
		public OptionContext _option;
		public MapFieldContext _mapField;
		public FieldContext _field;
		public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public MapFieldContext[] mapField() {
			return GetRuleContexts<MapFieldContext>();
		}
		public MapFieldContext mapField(int i) {
			return GetRuleContext<MapFieldContext>(i);
		}
		public ReservedContext[] reserved() {
			return GetRuleContexts<ReservedContext>();
		}
		public ReservedContext reserved(int i) {
			return GetRuleContext<ReservedContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public EnumDefinitionContext[] enumDefinition() {
			return GetRuleContexts<EnumDefinitionContext>();
		}
		public EnumDefinitionContext enumDefinition(int i) {
			return GetRuleContext<EnumDefinitionContext>(i);
		}
		public MessageContext[] message() {
			return GetRuleContexts<MessageContext>();
		}
		public MessageContext message(int i) {
			return GetRuleContext<MessageContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 18, RULE_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(T__16);
			State = 163; _localctx._messageName = messageName();
			_localctx.node =  new MessageDeclaration(_localctx.Start, (_localctx._messageName!=null?TokenStream.GetText(_localctx._messageName.Start,_localctx._messageName.Stop):null));
			State = 165; Match(T__13);
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << T__16) | (1L << T__17) | (1L << T__25) | (1L << T__31) | (1L << T__33) | (1L << Ident))) != 0)) {
				{
				State = 183;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__17:
					{
					State = 166; _localctx.e = enumDefinition();
					_localctx.node.Enums.Add(_localctx.e.node);
					}
					break;
				case T__16:
					{
					State = 169; _localctx.m = message();
					_localctx.node.InnerMessages.Add(_localctx.m.node);
					}
					break;
				case T__9:
					{
					State = 172; _localctx._option = option();
					_localctx.node.Options.Add(_localctx._option.node);
					}
					break;
				case T__33:
					{
					State = 175; _localctx._mapField = mapField();
					_localctx.node.Fields.Add(_localctx._mapField.node);
					}
					break;
				case T__25:
					{
					State = 178; reserved();
					}
					break;
				case T__31:
				case Ident:
					{
					State = 179; _localctx._field = field();
					_localctx.node.Fields.Add(_localctx._field.node);
					}
					break;
				case T__4:
					{
					State = 182; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 188; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public EnumDeclaration node;
		public IToken _Ident;
		public OptionContext _option;
		public EnumFieldContext _enumField;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(T__17);
			State = 191; _localctx._Ident = Match(Ident);
			_localctx.node =  new EnumDeclaration((_localctx._Ident!=null?_localctx._Ident.Text:null), _localctx.Start);
			State = 193; Match(T__13);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << Ident))) != 0)) {
				{
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 194; _localctx._option = option();
					_localctx.node.Options.Add(_localctx._option.node);
					}
					break;
				case Ident:
					{
					State = 197; _localctx._enumField = enumField();
					_localctx.node.Members.Add(_localctx._enumField.node);
					}
					break;
				case T__4:
					{
					State = 200; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public EnumMemberDeclaration node;
		public IToken _Ident;
		public IToken neg;
		public IToken _IntLit;
		public FieldOptionsContext o;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; _localctx._Ident = Match(Ident);
			_localctx.node = new EnumMemberDeclaration((_localctx._Ident!=null?_localctx._Ident.Text:null), _localctx.Start);
			State = 210; Match(T__1);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 211; _localctx.neg = Match(T__18);
				}
			}

			State = 214; _localctx._IntLit = Match(IntLit);
			_localctx.node.Value = (_localctx.neg!=null?-1:1) * (_localctx._IntLit!=null?int.Parse(_localctx._IntLit.Text):0);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 216; Match(T__19);
				State = 217; _localctx.o = fieldOptions();
				_localctx.node.Options.AddRange(_localctx.o.value);
				State = 219; Match(T__20);
				}
			}

			State = 223; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceContext : ParserRuleContext {
		public ServiceDeclaration node;
		public IToken _Ident;
		public OptionContext _option;
		public RpcContext _rpc;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public ServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_service; } }
	}

	[RuleVersion(0)]
	public ServiceContext service() {
		ServiceContext _localctx = new ServiceContext(Context, State);
		EnterRule(_localctx, 24, RULE_service);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(T__21);
			State = 226; _localctx._Ident = Match(Ident);
			_localctx.node =  new ServiceDeclaration((_localctx._Ident!=null?_localctx._Ident.Text:null), _localctx.Start);
			State = 228; Match(T__13);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__9) | (1L << T__22))) != 0)) {
				{
				State = 236;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 229; _localctx._option = option();
					_localctx.node.Options.Add(_localctx._option.node);
					}
					break;
				case T__22:
					{
					State = 232; _localctx._rpc = rpc();
					_localctx.node.Rpcs.Add(_localctx._rpc.node);
					}
					break;
				case T__4:
					{
					State = 235; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public RpcDeclaration node;
		public IToken _Ident;
		public FullIdentContext req;
		public FullIdentContext resp;
		public OptionContext _option;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public FullIdentContext[] fullIdent() {
			return GetRuleContexts<FullIdentContext>();
		}
		public FullIdentContext fullIdent(int i) {
			return GetRuleContext<FullIdentContext>(i);
		}
		public OptionContext[] option() {
			return GetRuleContexts<OptionContext>();
		}
		public OptionContext option(int i) {
			return GetRuleContext<OptionContext>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 26, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(T__22);
			State = 244; _localctx._Ident = Match(Ident);
			State = 245; Match(T__10);
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 246; Match(T__23);
				}
			}

			State = 249; _localctx.req = fullIdent();
			State = 250; Match(T__11);
			State = 251; Match(T__24);
			State = 252; Match(T__10);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__23) {
				{
				State = 253; Match(T__23);
				}
			}

			State = 256; _localctx.resp = fullIdent();
			State = 257; Match(T__11);

			            _localctx.node =  new RpcDeclaration((_localctx._Ident!=null?_localctx._Ident.Text:null), _localctx.req.node, _localctx.resp.node, _localctx.Start);            
			        
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13) {
				{
				State = 259; Match(T__13);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__9) {
					{
					{
					State = 260; _localctx._option = option();
					 _localctx.node.Options.Add(_localctx._option.node);
					}
					}
					State = 267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 268; Match(T__14);
				}
			}

			State = 271; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedContext : ParserRuleContext {
		public RangesContext ranges() {
			return GetRuleContext<RangesContext>(0);
		}
		public FieldNamesContext fieldNames() {
			return GetRuleContext<FieldNamesContext>(0);
		}
		public ReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reserved; } }
	}

	[RuleVersion(0)]
	public ReservedContext reserved() {
		ReservedContext _localctx = new ReservedContext(Context, State);
		EnterRule(_localctx, 28, RULE_reserved);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(T__25);
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntLit:
				{
				State = 274; ranges();
				}
				break;
			case StrLit:
				{
				State = 275; fieldNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 278; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangesContext : ParserRuleContext {
		public RangeContext[] range() {
			return GetRuleContexts<RangeContext>();
		}
		public RangeContext range(int i) {
			return GetRuleContext<RangeContext>(i);
		}
		public RangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ranges; } }
	}

	[RuleVersion(0)]
	public RangesContext ranges() {
		RangesContext _localctx = new RangesContext(Context, State);
		EnterRule(_localctx, 30, RULE_ranges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; range();
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 281; Match(T__26);
				State = 282; range();
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode[] IntLit() { return GetTokens(Protobuf3Parser.IntLit); }
		public ITerminalNode IntLit(int i) {
			return GetToken(Protobuf3Parser.IntLit, i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 32, RULE_range);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; Match(IntLit);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(IntLit);
				State = 290; Match(T__27);
				State = 291; Match(IntLit);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNamesContext : ParserRuleContext {
		public ITerminalNode[] StrLit() { return GetTokens(Protobuf3Parser.StrLit); }
		public ITerminalNode StrLit(int i) {
			return GetToken(Protobuf3Parser.StrLit, i);
		}
		public FieldNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNames; } }
	}

	[RuleVersion(0)]
	public FieldNamesContext fieldNames() {
		FieldNamesContext _localctx = new FieldNamesContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(StrLit);
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 295; Match(T__26);
				State = 296; Match(StrLit);
				}
				}
				State = 301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdentContext : ParserRuleContext {
		public IdentifierExpression node;
		public IToken id;
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public FullIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullIdent; } }
	}

	[RuleVersion(0)]
	public FullIdentContext fullIdent() {
		FullIdentContext _localctx = new FullIdentContext(Context, State);
		EnterRule(_localctx, 36, RULE_fullIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; _localctx.id = Match(Ident);
			 _localctx.node = new IdentifierExpression((_localctx.id!=null?_localctx.id.Text:null),null,_localctx.id);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 304; Match(T__12);
				State = 305; _localctx.id = Match(Ident);
				_localctx.node = new IdentifierExpression((_localctx.id!=null?_localctx.id.Text:null),_localctx.node,_localctx.id);
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantExp node;
		public IToken neg;
		public IToken _IntLit;
		public IToken _FloatLit;
		public IToken _StrLit;
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public ITerminalNode FloatLit() { return GetToken(Protobuf3Parser.FloatLit, 0); }
		public ITerminalNode StrLit() { return GetToken(Protobuf3Parser.StrLit, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 40, RULE_constant);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__18:
					{
					State = 314; _localctx.neg = Match(T__18);
					}
					break;
				case T__28:
					{
					State = 315; Match(T__28);
					}
					break;
				case IntLit:
					break;
				default:
					break;
				}
				State = 318; _localctx._IntLit = Match(IntLit);
				_localctx.node =  new ConstantExp(_localctx.Start, (_localctx.neg!=null?-1:1) * int.Parse((_localctx._IntLit!=null?_localctx._IntLit.Text:null)));
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__18:
					{
					State = 320; _localctx.neg = Match(T__18);
					}
					break;
				case T__28:
					{
					State = 321; Match(T__28);
					}
					break;
				case FloatLit:
					break;
				default:
					break;
				}
				State = 324; _localctx._FloatLit = Match(FloatLit);
				_localctx.node =  new ConstantExp(_localctx.Start, (_localctx.neg!=null?-1:1) * double.Parse((_localctx._FloatLit!=null?_localctx._FloatLit.Text:null)));
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326; _localctx._StrLit = Match(StrLit);
				_localctx.node =  new ConstantExp(_localctx.Start, (_localctx._StrLit!=null?_localctx._StrLit.Text:null).Substring(1, (_localctx._StrLit!=null?_localctx._StrLit.Text:null).Length - 2));
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 328; Match(T__29);
				_localctx.node =  new ConstantExp(_localctx.Start, true);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 330; Match(T__30);
				_localctx.node =  new ConstantExp(_localctx.Start, false);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IdentifierExpression node;
		public FullIdentContext _fullIdent;
		public FullIdentContext fullIdent() {
			return GetRuleContext<FullIdentContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; _localctx._fullIdent = fullIdent();
			_localctx.node =  _localctx._fullIdent.node;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public FieldDeclaration node;
		public TypeContext _type;
		public IToken id;
		public IToken number;
		public FieldOptionsContext _fieldOptions;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 44, RULE_field);
		 
		    TypeIdentifier typeRef = new TypeIdentifier();
		    List<OptionsExpression> options = null;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__31) {
				{
				State = 337; Match(T__31);
				typeRef.IsArray=true;
				}
			}

			State = 341; _localctx._type = type();
			 typeRef.Name=_localctx._type.node; 
			State = 343; _localctx.id = Match(Ident);
			State = 344; Match(T__1);
			State = 345; _localctx.number = Match(IntLit);
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 346; Match(T__19);
				State = 347; _localctx._fieldOptions = fieldOptions();
				 options=_localctx._fieldOptions.value; 
				State = 349; Match(T__20);
				}
			}

			State = 353; Match(T__4);

			            _localctx.node =  new FieldDeclaration(_localctx.Start, typeRef, (_localctx.id!=null?_localctx.id.Text:null), (_localctx.number!=null?int.Parse(_localctx.number.Text):0), options);
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		public List<OptionsExpression> value = new List<OptionsExpression>();
		public FieldOptionContext o;
		public FieldOptionContext[] fieldOption() {
			return GetRuleContexts<FieldOptionContext>();
		}
		public FieldOptionContext fieldOption(int i) {
			return GetRuleContext<FieldOptionContext>(i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 46, RULE_fieldOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; _localctx.o = fieldOption();
			_localctx.value.Add(_localctx.o.node);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26) {
				{
				{
				State = 358; Match(T__26);
				State = 359; _localctx.o = fieldOption();
				_localctx.value.Add(_localctx.o.node);
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionContext : ParserRuleContext {
		public OptionsExpression node;
		public OptionNameContext _optionName;
		public ConstantContext _constant;
		public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public FieldOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOption; } }
	}

	[RuleVersion(0)]
	public FieldOptionContext fieldOption() {
		FieldOptionContext _localctx = new FieldOptionContext(Context, State);
		EnterRule(_localctx, 48, RULE_fieldOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; _localctx._optionName = optionName();
			State = 368; Match(T__1);
			State = 369; _localctx._constant = constant();
			_localctx.node = new OptionsExpression(_localctx._optionName.node, _localctx._constant.node, _localctx.Start);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofContext : ParserRuleContext {
		public OneofNameContext oneofName() {
			return GetRuleContext<OneofNameContext>(0);
		}
		public OneofFieldContext[] oneofField() {
			return GetRuleContexts<OneofFieldContext>();
		}
		public OneofFieldContext oneofField(int i) {
			return GetRuleContext<OneofFieldContext>(i);
		}
		public EmptyStatementContext[] emptyStatement() {
			return GetRuleContexts<EmptyStatementContext>();
		}
		public EmptyStatementContext emptyStatement(int i) {
			return GetRuleContext<EmptyStatementContext>(i);
		}
		public OneofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneof; } }
	}

	[RuleVersion(0)]
	public OneofContext oneof() {
		OneofContext _localctx = new OneofContext(Context, State);
		EnterRule(_localctx, 50, RULE_oneof);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; Match(T__32);
			State = 373; oneofName();
			State = 374; Match(T__13);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==Ident) {
				{
				State = 377;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Ident:
					{
					State = 375; oneofField();
					}
					break;
				case T__4:
					{
					State = 376; emptyStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 382; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public OneofFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofField; } }
	}

	[RuleVersion(0)]
	public OneofFieldContext oneofField() {
		OneofFieldContext _localctx = new OneofFieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_oneofField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; type();
			State = 385; fieldName();
			State = 386; Match(T__1);
			State = 387; Match(IntLit);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 388; Match(T__19);
				State = 389; fieldOptions();
				State = 390; Match(T__20);
				}
			}

			State = 394; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapFieldContext : ParserRuleContext {
		public FieldDeclaration node;
		public TypeContext k;
		public TypeContext v;
		public IToken _Ident;
		public IToken _IntLit;
		public FieldOptionsContext _fieldOptions;
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public ITerminalNode IntLit() { return GetToken(Protobuf3Parser.IntLit, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		public MapFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapField; } }
	}

	[RuleVersion(0)]
	public MapFieldContext mapField() {
		MapFieldContext _localctx = new MapFieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_mapField);
		 
		    TypeIdentifier typeRef = new TypeIdentifier();
		    typeRef.IsMap = true;
		    typeRef.Name = new IdentifierExpression("map");
		        
		    List<OptionsExpression> options = null;

		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(T__33);
			State = 397; Match(T__34);
			State = 398; _localctx.k = type();
			State = 399; Match(T__26);
			State = 400; _localctx.v = type();
			State = 401; Match(T__35);
			State = 402; _localctx._Ident = Match(Ident);
			State = 403; Match(T__1);
			State = 404; _localctx._IntLit = Match(IntLit);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 405; Match(T__19);
				State = 406; _localctx._fieldOptions = fieldOptions();
				  options=_localctx._fieldOptions.value; 
				State = 408; Match(T__20);
				}
			}

			State = 412; Match(T__4);

			        typeRef.GenericArgs = new TypeIdentifier[]{ new TypeIdentifier(_localctx.k.node), new TypeIdentifier(_localctx.v.node) };
			        
			        _localctx.node =  new FieldDeclaration(_localctx.Start);        
			        _localctx.node.Type = typeRef;
			        _localctx.node.Name = (_localctx._Ident!=null?_localctx._Ident.Text:null);
			        _localctx.node.Number= (_localctx._IntLit!=null?int.Parse(_localctx._IntLit.Text):0);

			        if(options!=null)
			            _localctx.node.Options.AddRange(options);     
			    
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public MessageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageName; } }
	}

	[RuleVersion(0)]
	public MessageNameContext messageName() {
		MessageNameContext _localctx = new MessageNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_messageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofNameContext : ParserRuleContext {
		public ITerminalNode Ident() { return GetToken(Protobuf3Parser.Ident, 0); }
		public OneofNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofName; } }
	}

	[RuleVersion(0)]
	public OneofNameContext oneofName() {
		OneofNameContext _localctx = new OneofNameContext(Context, State);
		EnterRule(_localctx, 60, RULE_oneofName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(Ident);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeContext : ParserRuleContext {
		public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		public ITerminalNode[] Ident() { return GetTokens(Protobuf3Parser.Ident); }
		public ITerminalNode Ident(int i) {
			return GetToken(Protobuf3Parser.Ident, i);
		}
		public MessageTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageType; } }
	}

	[RuleVersion(0)]
	public MessageTypeContext messageType() {
		MessageTypeContext _localctx = new MessageTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_messageType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 421; Match(T__12);
				}
			}

			State = 428;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 424; Match(Ident);
					State = 425; Match(T__12);
					}
					} 
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 431; messageName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '/', '\x1B4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', 'Q', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'T', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '`', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 't', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x80', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x85', '\n', '\a', 
		'\f', '\a', '\xE', '\a', '\x88', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '\x8E', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\x91', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xA3', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xBA', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xBD', '\v', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\xCC', '\n', '\f', '\f', '\f', '\xE', '\f', '\xCF', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xD7', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xE0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xEF', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xF2', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xFA', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x101', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x10A', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x10D', '\v', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x110', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x117', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\a', '\x11', '\x11E', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x121', 
		'\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x127', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\a', '\x13', '\x12C', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x12F', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x136', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x139', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x13F', '\n', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x145', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x14F', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x156', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x162', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x16D', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x170', 
		'\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x17C', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x17F', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x18B', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x5', '\x1D', '\x19D', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x5', '!', '\x1A9', '\n', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x1AD', '\n', '!', '\f', '!', '\xE', '!', 
		'\x1B0', '\v', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x2', '\x2', 
		'\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x2', '\x3', '\x3', '\x2', '\x5', '\x6', '\x2', '\x1C9', '\x2', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\b', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'j', '\x3', '\x2', '\x2', '\x2', '\f', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x89', '\x3', '\x2', '\x2', '\x2', '\x10', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x113', '\x3', '\x2', '\x2', '\x2', ' ', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x126', '\x3', '\x2', '\x2', '\x2', '$', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x130', '\x3', '\x2', '\x2', '\x2', '(', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		',', '\x150', '\x3', '\x2', '\x2', '\x2', '.', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x166', '\x3', '\x2', '\x2', '\x2', '\x32', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x182', '\x3', '\x2', '\x2', '\x2', '\x38', '\x18E', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1A1', '\x3', '\x2', '\x2', '\x2', '<', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x42', 'R', '\x5', '\x4', '\x3', 
		'\x2', '\x43', '\x44', '\x5', '\x6', '\x4', '\x2', '\x44', '\x45', '\b', 
		'\x2', '\x1', '\x2', '\x45', 'Q', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x5', '\b', '\x5', '\x2', 'G', 'H', '\b', '\x2', '\x1', '\x2', 'H', 
		'Q', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\n', '\x6', '\x2', 
		'J', 'K', '\b', '\x2', '\x1', '\x2', 'K', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x5', '\x12', '\n', '\x2', 'M', 'N', '\b', '\x2', '\x1', '\x2', 
		'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x5', '(', '\x15', '\x2', 
		'P', '\x43', '\x3', '\x2', '\x2', '\x2', 'P', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'I', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\x2', '\x2', '\x3', 'V', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\a', '\x3', '\x2', '\x2', 'X', 'Y', '\a', '\x4', 
		'\x2', '\x2', 'Y', 'Z', '\t', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\a', 
		'\x2', '\x2', '[', '\x5', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\a', 
		'\b', '\x2', '\x2', ']', '`', '\a', '\t', '\x2', '\x2', '^', '`', '\a', 
		'\n', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '+', '\x2', '\x2', '\x62', 
		'\x63', '\a', '\a', '\x2', '\x2', '\x63', '\x64', '\b', '\x4', '\x1', 
		'\x2', '\x64', '\a', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', 
		'\v', '\x2', '\x2', '\x66', 'g', '\x5', '&', '\x14', '\x2', 'g', 'h', 
		'\a', '\a', '\x2', '\x2', 'h', 'i', '\b', '\x5', '\x1', '\x2', 'i', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\f', '\x2', '\x2', 'k', 'l', 
		'\x5', '\f', '\a', '\x2', 'l', 's', '\a', '\x4', '\x2', '\x2', 'm', 'n', 
		'\x5', '*', '\x16', '\x2', 'n', 'o', '\b', '\x6', '\x1', '\x2', 'o', 't', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '\xE', '\b', '\x2', 'q', 
		'r', '\b', '\x6', '\x1', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 
		's', 'm', '\x3', '\x2', '\x2', '\x2', 's', 'p', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\a', '\x2', '\x2', 
		'v', 'w', '\b', '\x6', '\x1', '\x2', 'w', '\v', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\'', '\x2', '\x2', 'y', '\x80', '\b', '\a', '\x1', '\x2', 
		'z', '{', '\a', '\r', '\x2', '\x2', '{', '|', '\x5', '&', '\x14', '\x2', 
		'|', '}', '\b', '\a', '\x1', '\x2', '}', '~', '\a', '\xE', '\x2', '\x2', 
		'~', '\x80', '\x3', '\x2', '\x2', '\x2', '\x7F', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x80', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\xF', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\'', '\x2', '\x2', '\x83', '\x85', '\b', '\a', '\x1', '\x2', 
		'\x84', '\x81', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x87', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x86', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8F', '\a', '\x10', 
		'\x2', '\x2', '\x8A', '\x8B', '\x5', '\x10', '\t', '\x2', '\x8B', '\x8C', 
		'\b', '\b', '\x1', '\x2', '\x8C', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x11', 
		'\x2', '\x2', '\x93', '\xF', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', 
		'\a', '\'', '\x2', '\x2', '\x95', '\x96', '\a', '\x12', '\x2', '\x2', 
		'\x96', '\x97', '\x5', '*', '\x16', '\x2', '\x97', '\x98', '\b', '\t', 
		'\x1', '\x2', '\x98', '\x11', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x5', '\x14', '\v', '\x2', '\x9A', '\x9B', '\b', '\n', '\x1', '\x2', 
		'\x9B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\x5', '\x16', 
		'\f', '\x2', '\x9D', '\x9E', '\b', '\n', '\x1', '\x2', '\x9E', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x1A', '\xE', '\x2', 
		'\xA0', '\xA1', '\b', '\n', '\x1', '\x2', '\xA1', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x13', 
		'\x2', '\x2', '\xA5', '\xA6', '\x5', ':', '\x1E', '\x2', '\xA6', '\xA7', 
		'\b', '\v', '\x1', '\x2', '\xA7', '\xBB', '\a', '\x10', '\x2', '\x2', 
		'\xA8', '\xA9', '\x5', '\x16', '\f', '\x2', '\xA9', '\xAA', '\b', '\v', 
		'\x1', '\x2', '\xAA', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x5', '\x14', '\v', '\x2', '\xAC', '\xAD', '\b', '\v', '\x1', '\x2', 
		'\xAD', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\n', 
		'\x6', '\x2', '\xAF', '\xB0', '\b', '\v', '\x1', '\x2', '\xB0', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x38', '\x1D', '\x2', 
		'\xB2', '\xB3', '\b', '\v', '\x1', '\x2', '\xB3', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xBA', '\x5', '\x1E', '\x10', '\x2', '\xB5', '\xB6', 
		'\x5', '.', '\x18', '\x2', '\xB6', '\xB7', '\b', '\v', '\x1', '\x2', '\xB7', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBA', '\x5', '(', '\x15', 
		'\x2', '\xB9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\a', '\x11', '\x2', '\x2', '\xBF', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x14', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\'', '\x2', '\x2', '\xC2', '\xC3', '\b', 
		'\f', '\x1', '\x2', '\xC3', '\xCD', '\a', '\x10', '\x2', '\x2', '\xC4', 
		'\xC5', '\x5', '\n', '\x6', '\x2', '\xC5', '\xC6', '\b', '\f', '\x1', 
		'\x2', '\xC6', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'\x18', '\r', '\x2', '\xC8', '\xC9', '\b', '\f', '\x1', '\x2', '\xC9', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x5', '(', '\x15', 
		'\x2', '\xCB', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\x11', '\x2', '\x2', '\xD1', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\'', '\x2', '\x2', '\xD3', '\xD4', '\b', 
		'\r', '\x1', '\x2', '\xD4', '\xD6', '\a', '\x4', '\x2', '\x2', '\xD5', 
		'\xD7', '\a', '\x15', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '(', '\x2', '\x2', '\xD9', 
		'\xDF', '\b', '\r', '\x1', '\x2', '\xDA', '\xDB', '\a', '\x16', '\x2', 
		'\x2', '\xDB', '\xDC', '\x5', '\x30', '\x19', '\x2', '\xDC', '\xDD', '\b', 
		'\r', '\x1', '\x2', '\xDD', '\xDE', '\a', '\x17', '\x2', '\x2', '\xDE', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\a', '\x2', '\x2', '\xE2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '\x18', '\x2', 
		'\x2', '\xE4', '\xE5', '\a', '\'', '\x2', '\x2', '\xE5', '\xE6', '\b', 
		'\xE', '\x1', '\x2', '\xE6', '\xF0', '\a', '\x10', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', '\n', '\x6', '\x2', '\xE8', '\xE9', '\b', '\xE', '\x1', 
		'\x2', '\xE9', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x5', 
		'\x1C', '\xF', '\x2', '\xEB', '\xEC', '\b', '\xE', '\x1', '\x2', '\xEC', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEF', '\x5', '(', '\x15', 
		'\x2', '\xEE', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x11', '\x2', '\x2', '\xF4', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\x19', '\x2', '\x2', '\xF6', '\xF7', '\a', 
		'\'', '\x2', '\x2', '\xF7', '\xF9', '\a', '\r', '\x2', '\x2', '\xF8', 
		'\xFA', '\a', '\x1A', '\x2', '\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xF9', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\x5', '&', '\x14', '\x2', '\xFC', 
		'\xFD', '\a', '\xE', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x1B', '\x2', 
		'\x2', '\xFE', '\x100', '\a', '\r', '\x2', '\x2', '\xFF', '\x101', '\a', 
		'\x1A', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\x5', '&', '\x14', '\x2', '\x103', '\x104', 
		'\a', '\xE', '\x2', '\x2', '\x104', '\x10F', '\b', '\xF', '\x1', '\x2', 
		'\x105', '\x10B', '\a', '\x10', '\x2', '\x2', '\x106', '\x107', '\x5', 
		'\n', '\x6', '\x2', '\x107', '\x108', '\b', '\xF', '\x1', '\x2', '\x108', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x109', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x110', '\a', '\x11', '\x2', '\x2', '\x10F', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', 
		'\a', '\a', '\x2', '\x2', '\x112', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x116', '\a', '\x1C', '\x2', '\x2', '\x114', '\x117', '\x5', 
		' ', '\x11', '\x2', '\x115', '\x117', '\x5', '$', '\x13', '\x2', '\x116', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\a', '\a', '\x2', '\x2', '\x119', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11F', '\x5', '\"', '\x12', '\x2', '\x11B', '\x11C', '\a', 
		'\x1D', '\x2', '\x2', '\x11C', '\x11E', '\x5', '\"', '\x12', '\x2', '\x11D', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x122', '\x127', '\a', 
		'(', '\x2', '\x2', '\x123', '\x124', '\a', '(', '\x2', '\x2', '\x124', 
		'\x125', '\a', '\x1E', '\x2', '\x2', '\x125', '\x127', '\a', '(', '\x2', 
		'\x2', '\x126', '\x122', '\x3', '\x2', '\x2', '\x2', '\x126', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x12D', '\a', '+', '\x2', '\x2', '\x129', '\x12A', '\a', '\x1D', 
		'\x2', '\x2', '\x12A', '\x12C', '\a', '+', '\x2', '\x2', '\x12B', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '%', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '\'', '\x2', 
		'\x2', '\x131', '\x137', '\b', '\x14', '\x1', '\x2', '\x132', '\x133', 
		'\a', '\xF', '\x2', '\x2', '\x133', '\x134', '\a', '\'', '\x2', '\x2', 
		'\x134', '\x136', '\b', '\x14', '\x1', '\x2', '\x135', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\'', '\x3', '\x2', '\x2', '\x2', '\x139', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\a', '\x2', '\x2', '\x13B', 
		')', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', '\a', '\x15', '\x2', 
		'\x2', '\x13D', '\x13F', '\a', '\x1F', '\x2', '\x2', '\x13E', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x141', '\a', '(', '\x2', '\x2', '\x141', 
		'\x14F', '\b', '\x16', '\x1', '\x2', '\x142', '\x145', '\a', '\x15', '\x2', 
		'\x2', '\x143', '\x145', '\a', '\x1F', '\x2', '\x2', '\x144', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\a', ')', '\x2', '\x2', '\x147', 
		'\x14F', '\b', '\x16', '\x1', '\x2', '\x148', '\x149', '\a', '+', '\x2', 
		'\x2', '\x149', '\x14F', '\b', '\x16', '\x1', '\x2', '\x14A', '\x14B', 
		'\a', ' ', '\x2', '\x2', '\x14B', '\x14F', '\b', '\x16', '\x1', '\x2', 
		'\x14C', '\x14D', '\a', '!', '\x2', '\x2', '\x14D', '\x14F', '\b', '\x16', 
		'\x1', '\x2', '\x14E', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '+', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\x5', '&', '\x14', '\x2', '\x151', '\x152', '\b', '\x17', '\x1', 
		'\x2', '\x152', '-', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', 
		'\"', '\x2', '\x2', '\x154', '\x156', '\b', '\x18', '\x1', '\x2', '\x155', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', 
		'\x5', ',', '\x17', '\x2', '\x158', '\x159', '\b', '\x18', '\x1', '\x2', 
		'\x159', '\x15A', '\a', '\'', '\x2', '\x2', '\x15A', '\x15B', '\a', '\x4', 
		'\x2', '\x2', '\x15B', '\x161', '\a', '(', '\x2', '\x2', '\x15C', '\x15D', 
		'\a', '\x16', '\x2', '\x2', '\x15D', '\x15E', '\x5', '\x30', '\x19', '\x2', 
		'\x15E', '\x15F', '\b', '\x18', '\x1', '\x2', '\x15F', '\x160', '\a', 
		'\x17', '\x2', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', 
		'\a', '\a', '\x2', '\x2', '\x164', '\x165', '\b', '\x18', '\x1', '\x2', 
		'\x165', '/', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x5', '\x32', 
		'\x1A', '\x2', '\x167', '\x16E', '\b', '\x19', '\x1', '\x2', '\x168', 
		'\x169', '\a', '\x1D', '\x2', '\x2', '\x169', '\x16A', '\x5', '\x32', 
		'\x1A', '\x2', '\x16A', '\x16B', '\b', '\x19', '\x1', '\x2', '\x16B', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x31', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\x5', '\f', '\a', '\x2', '\x172', 
		'\x173', '\a', '\x4', '\x2', '\x2', '\x173', '\x174', '\x5', '*', '\x16', 
		'\x2', '\x174', '\x175', '\b', '\x1A', '\x1', '\x2', '\x175', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\a', '#', '\x2', '\x2', 
		'\x177', '\x178', '\x5', '>', ' ', '\x2', '\x178', '\x17D', '\a', '\x10', 
		'\x2', '\x2', '\x179', '\x17C', '\x5', '\x36', '\x1C', '\x2', '\x17A', 
		'\x17C', '\x5', '(', '\x15', '\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17F', 
		'\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x181', '\a', '\x11', '\x2', '\x2', '\x181', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x182', '\x183', '\x5', ',', '\x17', '\x2', '\x183', '\x184', 
		'\x5', '<', '\x1F', '\x2', '\x184', '\x185', '\a', '\x4', '\x2', '\x2', 
		'\x185', '\x18A', '\a', '(', '\x2', '\x2', '\x186', '\x187', '\a', '\x16', 
		'\x2', '\x2', '\x187', '\x188', '\x5', '\x30', '\x19', '\x2', '\x188', 
		'\x189', '\a', '\x17', '\x2', '\x2', '\x189', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x186', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '\a', '\x2', '\x2', '\x18D', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x18F', '\a', '$', '\x2', '\x2', '\x18F', '\x190', 
		'\a', '%', '\x2', '\x2', '\x190', '\x191', '\x5', ',', '\x17', '\x2', 
		'\x191', '\x192', '\a', '\x1D', '\x2', '\x2', '\x192', '\x193', '\x5', 
		',', '\x17', '\x2', '\x193', '\x194', '\a', '&', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\'', '\x2', '\x2', '\x195', '\x196', '\a', '\x4', '\x2', 
		'\x2', '\x196', '\x19C', '\a', '(', '\x2', '\x2', '\x197', '\x198', '\a', 
		'\x16', '\x2', '\x2', '\x198', '\x199', '\x5', '\x30', '\x19', '\x2', 
		'\x199', '\x19A', '\b', '\x1D', '\x1', '\x2', '\x19A', '\x19B', '\a', 
		'\x17', '\x2', '\x2', '\x19B', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', 
		'\a', '\a', '\x2', '\x2', '\x19F', '\x1A0', '\b', '\x1D', '\x1', '\x2', 
		'\x1A0', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\'', 
		'\x2', '\x2', '\x1A2', ';', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', 
		'\a', '\'', '\x2', '\x2', '\x1A4', '=', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A6', '\a', '\'', '\x2', '\x2', '\x1A6', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1A9', '\a', '\xF', '\x2', '\x2', '\x1A8', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		'\'', '\x2', '\x2', '\x1AB', '\x1AD', '\a', '\xF', '\x2', '\x2', '\x1AC', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', 
		':', '\x1E', '\x2', '\x1B2', '\x41', '\x3', '\x2', '\x2', '\x2', '\'', 
		'P', 'R', '_', 's', '\x7F', '\x86', '\x8F', '\xA2', '\xB9', '\xBB', '\xCB', 
		'\xCD', '\xD6', '\xDF', '\xEE', '\xF0', '\xF9', '\x100', '\x10B', '\x10F', 
		'\x116', '\x11F', '\x126', '\x12D', '\x137', '\x13E', '\x144', '\x14E', 
		'\x155', '\x161', '\x16E', '\x17B', '\x17D', '\x18A', '\x19C', '\x1A8', 
		'\x1AE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
