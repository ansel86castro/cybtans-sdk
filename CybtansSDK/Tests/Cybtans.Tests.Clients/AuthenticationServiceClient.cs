
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Text.Json;
using System.Net.Http;
using System.Threading.Tasks;
using Cybtans.Common;
using mds = global::Cybtans.Tests.Models;

namespace Cybtans.Tests.Clients
{
	/// <summary>
	/// Jwt Authentication Service
	/// </summary>
	[ApiClient]
	public class AuthenticationServiceClient : IAuthenticationServiceClient
	{
		private readonly HttpClient _client;
		private readonly IHttpContentSerializer _serializer;
		private readonly Lazy<JsonSerializerOptions> _jsonOptions = new Lazy<JsonSerializerOptions>(() => new() { PropertyNameCaseInsensitive = true }, true);
		
		public AuthenticationServiceClient(HttpClient client, IHttpContentSerializer serializer = null)
		{
			_client = client;
			_serializer = serializer;
		}
	
		#region Public
		
		/// <summary>
		/// Generates an access token
		/// </summary>
		public async Task<mds::LoginResponse> Login(mds::LoginRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/auth/login");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			
			System.Buffers.IMemoryOwner<byte> memoryOwner = null;
			if (_serializer != null)
			{
				memoryOwner = _serializer.ToMemory(request);
				httpReq.Content = new ReadOnlyMemoryContent(memoryOwner.Memory);
				httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_serializer.ContentType);
			}
			else
			{
				httpReq.Content = System.Net.Http.Json.JsonContent.Create(request, new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
			}
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::LoginResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::LoginResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
				memoryOwner?.Dispose();
			}
		
		}
		
		#endregion Public
		
		#region Private
		
		#endregion Private
		
	
	}

}
