
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Text.Json;
using System.Net.Http;
using System.Threading.Tasks;
using Cybtans.Common;
using mds = global::Cybtans.Tests.Models;

namespace Cybtans.Tests.Clients
{
	/// <summary>
	/// Order's Service
	/// </summary>
	[ApiClient]
	public class OrderServiceClient : IOrderServiceClient
	{
		private readonly HttpClient _client;
		private readonly IHttpContentSerializer _serializer;
		private readonly Lazy<JsonSerializerOptions> _jsonOptions = new Lazy<JsonSerializerOptions>(() => new() { PropertyNameCaseInsensitive = true }, true);
		
		public OrderServiceClient(HttpClient client, IHttpContentSerializer serializer = null)
		{
			_client = client;
			_serializer = serializer;
		}
	
		#region Public
		
		/// <summary>
		/// Hellow; "Func"
		/// </summary>
		public async Task Foo()
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/foo");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task Baar()
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/baar");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task Test()
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/test");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task Argument()
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/arg");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Upload an image to the server
		/// </summary>
		public async Task<mds::UploadImageResponse> UploadImage(mds::UploadImageRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/upload");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			httpReq.Headers.Add("x-req-contenttype",  _serializer?.ContentType ?? "application/json");
			var xReqObj = new { request.Name, request.Size, };
			var buffer = _serializer != null? _serializer.ToUtf8Bytes(xReqObj) : System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(xReqObj);
			httpReq.Headers.Add("x-req-obj", Convert.ToBase64String(buffer));
			httpReq.Content = new StreamContent(request.Image);
			httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::UploadImageResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::UploadImageResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task<mds::UploadStreamResponse> UploadStreamById(mds::UploadStreamByIdRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/{request.Id}/upload");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			httpReq.Headers.Add("x-req-contenttype",  _serializer?.ContentType ?? "application/json");
			var xReqObj = new { request.Id, };
			var buffer = _serializer != null? _serializer.ToUtf8Bytes(xReqObj) : System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(xReqObj);
			httpReq.Headers.Add("x-req-obj", Convert.ToBase64String(buffer));
			httpReq.Content = new StreamContent(request.Data);
			httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::UploadStreamResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::UploadStreamResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task<mds::UploadStreamResponse> UploadStream(System.IO.Stream request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/ByteStream");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			httpReq.Content = new StreamContent(request);
			httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::UploadStreamResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::UploadStreamResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task<mds::DowndloadImageResponse> DownloadImage(mds::DownloadImageRequest request = null)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/download?{_GetQueryString(request)}");
			httpReq.Headers.Add("Accept", "application/octet-stream");
			httpReq.Headers.Add("x-req-accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			mds::DowndloadImageResponse responseDto;
			if (response.Headers.Contains("x-res-obj"))
			{
				var objBase64 = response.Headers.GetValues("x-res-obj").FirstOrDefault();
				responseDto =  _serializer != null ? _serializer.FromUtf8Bytes<mds::DowndloadImageResponse>(Convert.FromBase64String(objBase64)) : System.Text.Json.JsonSerializer.Deserialize<mds::DowndloadImageResponse>(Convert.FromBase64String(objBase64), _jsonOptions.Value);
			}
			else
			{
				responseDto = new ();
			}
			responseDto.Image = responseStream;
			return responseDto;
			
			}
			finally
			{
			}
		
		}
		
		public async Task GetMultiPath(mds::MultiPathRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/{request.Param1}multipath/{request.Param2}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task SendNotification(mds::OrderNotification request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/{request.OrderId}/notify/{request.UserId}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			
			System.Buffers.IMemoryOwner<byte> memoryOwner = null;
			if (_serializer != null)
			{
				memoryOwner = _serializer.ToMemory(request);
				httpReq.Content = new ReadOnlyMemoryContent(memoryOwner.Memory);
				httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_serializer.ContentType);
			}
			else
			{
				httpReq.Content = System.Net.Http.Json.JsonContent.Create(request, new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
			}
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
				memoryOwner?.Dispose();
			}
		
		}
		
		public async Task<mds::GetAllNamesResponse> GetAllNames()
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/names");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::GetAllNamesResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::GetAllNamesResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task<mds::OrderNamesDto> GetOrderName(mds::GetOrderNameRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/names/{request.Id}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::OrderNamesDto>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::OrderNamesDto>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		public async Task<mds::OrderNamesDto> CreateOrderName(mds::CreateOrderNameRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order/names");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			
			System.Buffers.IMemoryOwner<byte> memoryOwner = null;
			if (_serializer != null)
			{
				memoryOwner = _serializer.ToMemory(request);
				httpReq.Content = new ReadOnlyMemoryContent(memoryOwner.Memory);
				httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_serializer.ContentType);
			}
			else
			{
				httpReq.Content = System.Net.Http.Json.JsonContent.Create(request, new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
			}
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::OrderNamesDto>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::OrderNamesDto>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
				memoryOwner?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Returns a collection of OrderDto
		/// </summary>
		public async Task<mds::GetAllOrderResponse> GetAll(mds::GetAllRequest request = null)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order?{_GetQueryString(request)}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::GetAllOrderResponse>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::GetAllOrderResponse>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Returns one OrderDto by Id
		/// </summary>
		public async Task<mds::OrderDto> Get(mds::GetOrderRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Get, $"/api/Order/{request.Id}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::OrderDto>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::OrderDto>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Creates one OrderDto
		/// </summary>
		public async Task<mds::OrderDto> Create(mds::CreateOrderRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Post, $"/api/Order");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			
			System.Buffers.IMemoryOwner<byte> memoryOwner = null;
			if (_serializer != null)
			{
				memoryOwner = _serializer.ToMemory(request);
				httpReq.Content = new ReadOnlyMemoryContent(memoryOwner.Memory);
				httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_serializer.ContentType);
			}
			else
			{
				httpReq.Content = System.Net.Http.Json.JsonContent.Create(request, new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
			}
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::OrderDto>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::OrderDto>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
				memoryOwner?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Updates one OrderDto by Id
		/// </summary>
		public async Task<mds::OrderDto> Update(mds::UpdateOrderRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Put, $"/api/Order/{request.Id}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			
			System.Buffers.IMemoryOwner<byte> memoryOwner = null;
			if (_serializer != null)
			{
				memoryOwner = _serializer.ToMemory(request);
				httpReq.Content = new ReadOnlyMemoryContent(memoryOwner.Memory);
				httpReq.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(_serializer.ContentType);
			}
			else
			{
				httpReq.Content = System.Net.Http.Json.JsonContent.Create(request, new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"));
			}
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false);
			return _serializer != null ?
				await _serializer.FromStreamAsync<mds::OrderDto>(responseStream).ConfigureAwait(false) :
				await System.Text.Json.JsonSerializer.DeserializeAsync<mds::OrderDto>(responseStream, _jsonOptions.Value).ConfigureAwait(false);
			
			}
			finally
			{
				response?.Dispose();
				memoryOwner?.Dispose();
			}
		
		}
		
		/// <summary>
		/// Deletes one OrderDto by Id
		/// </summary>
		public async Task Delete(mds::DeleteOrderRequest request)
		{
			using var httpReq = new HttpRequestMessage(HttpMethod.Delete, $"/api/Order/{request.Id}");
			httpReq.Headers.Add("Accept", _serializer?.ContentType ?? "application/json");
			HttpResponseMessage response = null;
			try
			{
			
			response = await _client.SendAsync(httpReq).ConfigureAwait(false);
			if (!response.IsSuccessStatusCode) throw await ApiException.Create(httpReq, response);
			
			}
			finally
			{
				response?.Dispose();
			}
		
		}
		
		#endregion Public
		
		#region Private
		
		private string _GetQueryString(mds::DownloadImageRequest request)
		{
			if(request == null) return "";
		
			var sb = new StringBuilder();
			if(request.Name != null)
			{
				if(sb.Length > 0) sb.Append("&"); sb.Append(nameof(request.Name)).Append("=").Append(Uri.EscapeDataString(request.Name));
			}
			return sb.ToString();
		
		}
		
		private string _GetQueryString(mds::GetAllRequest request)
		{
			if(request == null) return "";
		
			var sb = new StringBuilder();
			if(request.Filter != null)
			{
				if(sb.Length > 0) sb.Append("&"); sb.Append(nameof(request.Filter)).Append("=").Append(Uri.EscapeDataString(request.Filter));
			}
			if(request.Sort != null)
			{
				if(sb.Length > 0) sb.Append("&"); sb.Append(nameof(request.Sort)).Append("=").Append(Uri.EscapeDataString(request.Sort));
			}
			if(request.Skip != null)
			{
				if(sb.Length > 0) sb.Append("&"); sb.Append(nameof(request.Skip)).Append("=").Append(Uri.EscapeDataString(request.Skip.ToString()));
			}
			if(request.Take != null)
			{
				if(sb.Length > 0) sb.Append("&"); sb.Append(nameof(request.Take)).Append("=").Append(Uri.EscapeDataString(request.Take.ToString()));
			}
			return sb.ToString();
		
		}
		
		#endregion Private
		
	
	}

}
