
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

import 'dart:typed_data';

/// Customer Entity
class CustomerDto {
	/// Customer's Name
	String name;
	/// Customer's FirstLastName
	String? firstLastName;
	/// Customer's SecondLastName
	String? secondLastName;
	/// Customer's Profile Id, can be null
	String? customerProfileId;
	CustomerProfileDto? customerProfile;
	String? id;
	DateTime? createDate;
	DateTime? updateDate;

	CustomerDto({required this.name, this.firstLastName, this.secondLastName, this.customerProfileId, this.customerProfile, this.id, this.createDate, this.updateDate});

	Map<String, dynamic> toJson() => {
		'name' : name,
 		if(firstLastName != null) 'firstLastName' : firstLastName,
 		if(secondLastName != null) 'secondLastName' : secondLastName,
 		if(customerProfileId != null) 'customerProfileId' : customerProfileId,
 		if(customerProfile != null) 'customerProfile' : customerProfile?.toJson(),
 		if(id != null) 'id' : id,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String()
	};

	CustomerDto.fromJson(Map<String, dynamic> json) :
		name = json['name'] ?? '',
		firstLastName = json['firstLastName'],
		secondLastName = json['secondLastName'],
		customerProfileId = json['customerProfileId'],
		customerProfile = json['customerProfile'] != null ? CustomerProfileDto.fromJson(json['customerProfile']) : null,
		id = json['id'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null;
	}


class CustomerProfileDto {
	String? name;
	String? id;
	DateTime? createDate;
	DateTime? updateDate;

	CustomerProfileDto({this.name, this.id, this.createDate, this.updateDate});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(id != null) 'id' : id,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String()
	};

	CustomerProfileDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		id = json['id'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null;
	}


class CustomerEventDto {
	String? fullName;
	String? customerProfileId;
	String? id;

	CustomerEventDto({this.fullName, this.customerProfileId, this.id});

	Map<String, dynamic> toJson() => {
		if(fullName != null) 'fullName' : fullName,
 		if(customerProfileId != null) 'customerProfileId' : customerProfileId,
 		if(id != null) 'id' : id
	};

	CustomerEventDto.fromJson(Map<String, dynamic> json) :
		fullName = json['fullName'],
		customerProfileId = json['customerProfileId'],
		id = json['id'];
	}


class OrderItemDto {
	String? productName;
	double? price;
	double? discount;
	String? orderId;
	String? productId;
	ProductDto? product;
	String? id;

	OrderItemDto({this.productName, this.price, this.discount, this.orderId, this.productId, this.product, this.id});

	Map<String, dynamic> toJson() => {
		if(productName != null) 'productName' : productName,
 		if(price != null) 'price' : price,
 		if(discount != null) 'discount' : discount,
 		if(orderId != null) 'orderId' : orderId,
 		if(productId != null) 'productId' : productId,
 		if(product != null) 'product' : product?.toJson(),
 		if(id != null) 'id' : id
	};

	OrderItemDto.fromJson(Map<String, dynamic> json) :
		productName = json['productName'],
		price = json['price'],
		discount = json['discount'],
		orderId = json['orderId'],
		productId = json['productId'],
		product = json['product'] != null ? ProductDto.fromJson(json['product']) : null,
		id = json['id'];
	}


class ProductDto {
	String? name;
	String? model;
	String? id;

	ProductDto({this.name, this.model, this.id});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(model != null) 'model' : model,
 		if(id != null) 'id' : id
	};

	ProductDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		model = json['model'],
		id = json['id'];
	}


class OrderDto {
	String? description;
	String? customerId;
	int? orderStateId;
	OrderTypeEnum? orderType;
	OrderStateDto? orderState;
	/// Customer
	CustomerDto? customer;
	List<OrderItemDto>? items;
	String? id;
	DateTime? createDate;
	DateTime? updateDate;

	OrderDto({this.description, this.customerId, this.orderStateId, this.orderType, this.orderState, this.customer, this.items, this.id, this.createDate, this.updateDate});

	Map<String, dynamic> toJson() => {
		if(description != null) 'description' : description,
 		if(customerId != null) 'customerId' : customerId,
 		if(orderStateId != null) 'orderStateId' : orderStateId,
 		if(orderType != null) 'orderType' : OrderTypeEnumConverter.toValue(orderType),
 		if(orderState != null) 'orderState' : orderState?.toJson(),
 		if(customer != null) 'customer' : customer?.toJson(),
 		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(id != null) 'id' : id,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String()
	};

	OrderDto.fromJson(Map<String, dynamic> json) :
		description = json['description'],
		customerId = json['customerId'],
		orderStateId = json['orderStateId'],
		orderType = OrderTypeEnumConverter.fromValue(json['orderType']),
		orderState = json['orderState'] != null ? OrderStateDto.fromJson(json['orderState']) : null,
		customer = json['customer'] != null ? CustomerDto.fromJson(json['customer']) : null,
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? OrderItemDto.fromJson(e) : null),
		id = json['id'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null;
	}



/// Enum Type Description
enum OrderTypeEnum {
  /// Default
  _default,
  /// Normal
  normal,
  /// Shipping
  shipping,
}

class OrderTypeEnumConverter {
	static int? toValue(OrderTypeEnum? e) {
		if( e == null) return null;
		switch (e) {
			case OrderTypeEnum._default: return 0;
			case OrderTypeEnum.normal: return 1;
			case OrderTypeEnum.shipping: return 2;
			default: throw ArgumentError('Conversion not supported');
		}
	}

	static OrderTypeEnum? fromValue(int? n) {
		if( n == null) return null;
		switch (n) {
			case 0: return OrderTypeEnum._default;
			case 1: return OrderTypeEnum.normal;
			case 2: return OrderTypeEnum.shipping;
			default: throw ArgumentError('Conversion not supported');
		}
	}

}


class OrderStateDto {
	String? name;
	int? id;

	OrderStateDto({this.name, this.id});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(id != null) 'id' : id
	};

	OrderStateDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		id = json['id'];
	}


class ReadOnlyEntityDto {
	String? name;
	DateTime? createDate;
	DateTime? updateDate;
	int? id;

	ReadOnlyEntityDto({this.name, this.createDate, this.updateDate, this.id});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String(),
 		if(id != null) 'id' : id
	};

	ReadOnlyEntityDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null,
		id = json['id'];
	}


class SoftDeleteOrderDto {
	String? name;
	bool? isDeleted;
	List<SoftDeleteOrderItemDto>? items;
	String? id;
	DateTime? createDate;
	DateTime? updateDate;

	SoftDeleteOrderDto({this.name, this.isDeleted, this.items, this.id, this.createDate, this.updateDate});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(isDeleted != null) 'isDeleted' : isDeleted,
 		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(id != null) 'id' : id,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String()
	};

	SoftDeleteOrderDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		isDeleted = json['isDeleted'],
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? SoftDeleteOrderItemDto.fromJson(e) : null),
		id = json['id'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null;
	}


class SoftDeleteOrderItemDto {
	String? name;
	bool? isDeleted;
	String? softDeleteOrderId;
	String? id;
	DateTime? createDate;
	DateTime? updateDate;

	SoftDeleteOrderItemDto({this.name, this.isDeleted, this.softDeleteOrderId, this.id, this.createDate, this.updateDate});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(isDeleted != null) 'isDeleted' : isDeleted,
 		if(softDeleteOrderId != null) 'softDeleteOrderId' : softDeleteOrderId,
 		if(id != null) 'id' : id,
 		if(createDate != null) 'createDate' : createDate?.toUtc().toIso8601String(),
 		if(updateDate != null) 'updateDate' : updateDate?.toUtc().toIso8601String()
	};

	SoftDeleteOrderItemDto.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		isDeleted = json['isDeleted'],
		softDeleteOrderId = json['softDeleteOrderId'],
		id = json['id'],
		createDate = json['createDate'] != null ? DateTime.parse(json['createDate']) : null,
		updateDate = json['updateDate'] != null ? DateTime.parse(json['updateDate']) : null;
	}


class GetAllRequest {
	String? filter;
	String? sort;
	int? skip;
	int? take;

	GetAllRequest({this.filter, this.sort, this.skip, this.take});

	Map<String, dynamic> toJson() => {
		if(filter != null) 'filter' : filter,
 		if(sort != null) 'sort' : sort,
 		if(skip != null) 'skip' : skip,
 		if(take != null) 'take' : take
	};

	GetAllRequest.fromJson(Map<String, dynamic> json) :
		filter = json['filter'],
		sort = json['sort'],
		skip = json['skip'],
		take = json['take'];
	}


class GetCustomerRequest {
	String? id;

	GetCustomerRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetCustomerRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class UpdateCustomerRequest {
	String? id;
	CustomerDto? value;

	UpdateCustomerRequest({this.id, this.value});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(value != null) 'value' : value?.toJson()
	};

	UpdateCustomerRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		value = json['value'] != null ? CustomerDto.fromJson(json['value']) : null;
	}


class DeleteCustomerRequest {
	String? id;

	DeleteCustomerRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	DeleteCustomerRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllCustomerResponse {
	List<CustomerDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllCustomerResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllCustomerResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? CustomerDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class CreateCustomerRequest {
	CustomerDto? value;

	CreateCustomerRequest({this.value});

	Map<String, dynamic> toJson() => {
		if(value != null) 'value' : value?.toJson()
	};

	CreateCustomerRequest.fromJson(Map<String, dynamic> json) :
		value = json['value'] != null ? CustomerDto.fromJson(json['value']) : null;
	}


class GetCustomerEventRequest {
	String? id;

	GetCustomerEventRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetCustomerEventRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class UpdateCustomerEventRequest {
	String? id;
	CustomerEventDto? value;

	UpdateCustomerEventRequest({this.id, this.value});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(value != null) 'value' : value?.toJson()
	};

	UpdateCustomerEventRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		value = json['value'] != null ? CustomerEventDto.fromJson(json['value']) : null;
	}


class DeleteCustomerEventRequest {
	String? id;

	DeleteCustomerEventRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	DeleteCustomerEventRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllCustomerEventResponse {
	List<CustomerEventDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllCustomerEventResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllCustomerEventResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? CustomerEventDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class CreateCustomerEventRequest {
	CustomerEventDto? value;

	CreateCustomerEventRequest({this.value});

	Map<String, dynamic> toJson() => {
		if(value != null) 'value' : value?.toJson()
	};

	CreateCustomerEventRequest.fromJson(Map<String, dynamic> json) :
		value = json['value'] != null ? CustomerEventDto.fromJson(json['value']) : null;
	}


class GetOrderRequest {
	String? id;

	GetOrderRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class UpdateOrderRequest {
	String? id;
	OrderDto? value;

	UpdateOrderRequest({this.id, this.value});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(value != null) 'value' : value?.toJson()
	};

	UpdateOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		value = json['value'] != null ? OrderDto.fromJson(json['value']) : null;
	}


class DeleteOrderRequest {
	String? id;

	DeleteOrderRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	DeleteOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllOrderResponse {
	List<OrderDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllOrderResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllOrderResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? OrderDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class CreateOrderRequest {
	OrderDto? value;

	CreateOrderRequest({this.value});

	Map<String, dynamic> toJson() => {
		if(value != null) 'value' : value?.toJson()
	};

	CreateOrderRequest.fromJson(Map<String, dynamic> json) :
		value = json['value'] != null ? OrderDto.fromJson(json['value']) : null;
	}


class GetOrderStateRequest {
	int? id;

	GetOrderStateRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetOrderStateRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class UpdateOrderStateRequest {
	int? id;
	OrderStateDto? value;

	UpdateOrderStateRequest({this.id, this.value});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(value != null) 'value' : value?.toJson()
	};

	UpdateOrderStateRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		value = json['value'] != null ? OrderStateDto.fromJson(json['value']) : null;
	}


class DeleteOrderStateRequest {
	int? id;

	DeleteOrderStateRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	DeleteOrderStateRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllOrderStateResponse {
	List<OrderStateDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllOrderStateResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllOrderStateResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? OrderStateDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class CreateOrderStateRequest {
	OrderStateDto? value;

	CreateOrderStateRequest({this.value});

	Map<String, dynamic> toJson() => {
		if(value != null) 'value' : value?.toJson()
	};

	CreateOrderStateRequest.fromJson(Map<String, dynamic> json) :
		value = json['value'] != null ? OrderStateDto.fromJson(json['value']) : null;
	}


class GetReadOnlyEntityRequest {
	int? id;

	GetReadOnlyEntityRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetReadOnlyEntityRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllReadOnlyEntityResponse {
	List<ReadOnlyEntityDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllReadOnlyEntityResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllReadOnlyEntityResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? ReadOnlyEntityDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class GetSoftDeleteOrderRequest {
	String? id;

	GetSoftDeleteOrderRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetSoftDeleteOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class UpdateSoftDeleteOrderRequest {
	String? id;
	SoftDeleteOrderDto? value;

	UpdateSoftDeleteOrderRequest({this.id, this.value});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(value != null) 'value' : value?.toJson()
	};

	UpdateSoftDeleteOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		value = json['value'] != null ? SoftDeleteOrderDto.fromJson(json['value']) : null;
	}


class DeleteSoftDeleteOrderRequest {
	String? id;

	DeleteSoftDeleteOrderRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	DeleteSoftDeleteOrderRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class GetAllSoftDeleteOrderResponse {
	List<SoftDeleteOrderDto>? items;
	int? page;
	int? totalPages;
	int? totalCount;

	GetAllSoftDeleteOrderResponse({this.items, this.page, this.totalPages, this.totalCount});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson()),
 		if(page != null) 'page' : page,
 		if(totalPages != null) 'totalPages' : totalPages,
 		if(totalCount != null) 'totalCount' : totalCount
	};

	GetAllSoftDeleteOrderResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? SoftDeleteOrderDto.fromJson(e) : null),
		page = json['page'],
		totalPages = json['totalPages'],
		totalCount = json['totalCount'];
	}


class CreateSoftDeleteOrderRequest {
	SoftDeleteOrderDto? value;

	CreateSoftDeleteOrderRequest({this.value});

	Map<String, dynamic> toJson() => {
		if(value != null) 'value' : value?.toJson()
	};

	CreateSoftDeleteOrderRequest.fromJson(Map<String, dynamic> json) :
		value = json['value'] != null ? SoftDeleteOrderDto.fromJson(json['value']) : null;
	}


/// Authentication Request
class LoginRequest {
	/// The username
	String username;
	/// The password
	String password;

	LoginRequest({required this.username, required this.password});

	Map<String, dynamic> toJson() => {
		'username' : username,
 		'password' : password
	};

	LoginRequest.fromJson(Map<String, dynamic> json) :
		username = json['username'] ?? '',
		password = json['password'] ?? '';
	}


/// Authentication response
class LoginResponse {
	/// Jwt Access Token
	String? token;

	LoginResponse({this.token});

	Map<String, dynamic> toJson() => {
		if(token != null) 'token' : token
	};

	LoginResponse.fromJson(Map<String, dynamic> json) :
		token = json['token'];
	}


class UploadImageRequest {
	/// Image Name "Hola" 
	String? name;
	int? size;
	Uint8List? image;

	UploadImageRequest({this.name, this.size, this.image});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name,
 		if(size != null) 'size' : size,
 		if(image != null) 'image' : image
	};

	UploadImageRequest.fromJson(Map<String, dynamic> json) :
		name = json['name'],
		size = json['size'],
		image = json['image'];
	}


class UploadImageResponse {
	String? url;
	String? m5Checksum;

	UploadImageResponse({this.url, this.m5Checksum});

	Map<String, dynamic> toJson() => {
		if(url != null) 'url' : url,
 		if(m5Checksum != null) 'm5Checksum' : m5Checksum
	};

	UploadImageResponse.fromJson(Map<String, dynamic> json) :
		url = json['url'],
		m5Checksum = json['m5Checksum'];
	}


class UploadStreamByIdRequest {
	String? id;
	Uint8List? data;

	UploadStreamByIdRequest({this.id, this.data});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(data != null) 'data' : data
	};

	UploadStreamByIdRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		data = json['data'];
	}


class UploadStreamResponse {
	String? m5Checksum;

	UploadStreamResponse({this.m5Checksum});

	Map<String, dynamic> toJson() => {
		if(m5Checksum != null) 'm5Checksum' : m5Checksum
	};

	UploadStreamResponse.fromJson(Map<String, dynamic> json) :
		m5Checksum = json['m5Checksum'];
	}


class DownloadImageRequest {
	String? name;

	DownloadImageRequest({this.name});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name
	};

	DownloadImageRequest.fromJson(Map<String, dynamic> json) :
		name = json['name'];
	}


class DowndloadImageResponse {
	String? fileName;
	String? contentType;
	Uint8List? image;

	DowndloadImageResponse({this.fileName, this.contentType, this.image});

	Map<String, dynamic> toJson() => {
		if(fileName != null) 'fileName' : fileName,
 		if(contentType != null) 'contentType' : contentType,
 		if(image != null) 'image' : image
	};

	DowndloadImageResponse.fromJson(Map<String, dynamic> json) :
		fileName = json['fileName'],
		contentType = json['contentType'],
		image = json['image'];
	}


class MultiPathRequest {
	String? param1;
	String? param2;

	MultiPathRequest({this.param1, this.param2});

	Map<String, dynamic> toJson() => {
		if(param1 != null) 'param1' : param1,
 		if(param2 != null) 'param2' : param2
	};

	MultiPathRequest.fromJson(Map<String, dynamic> json) :
		param1 = json['param1'],
		param2 = json['param2'];
	}


class OrderNotification {
	String? userId;
	String? orderId;
	String? msg;

	OrderNotification({this.userId, this.orderId, this.msg});

	Map<String, dynamic> toJson() => {
		if(userId != null) 'userId' : userId,
 		if(orderId != null) 'orderId' : orderId,
 		if(msg != null) 'msg' : msg
	};

	OrderNotification.fromJson(Map<String, dynamic> json) :
		userId = json['userId'],
		orderId = json['orderId'],
		msg = json['msg'];
	}


class GetAllNamesResponse {
	List<OrderNamesDto>? items;

	GetAllNamesResponse({this.items});

	Map<String, dynamic> toJson() => {
		if(items != null) 'items' : items?.map((e) => e.toJson())
	};

	GetAllNamesResponse.fromJson(Map<String, dynamic> json) :
		items = json['items']?.map((Map<String, dynamic>? e) => e != null ? OrderNamesDto.fromJson(e) : null);
	}


class OrderNamesDto {
	String? id;
	String? description;

	OrderNamesDto({this.id, this.description});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(description != null) 'description' : description
	};

	OrderNamesDto.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		description = json['description'];
	}


class GetOrderNameRequest {
	String? id;

	GetOrderNameRequest({this.id});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id
	};

	GetOrderNameRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'];
	}


class CreateOrderNameRequest {
	String? name;

	CreateOrderNameRequest({this.name});

	Map<String, dynamic> toJson() => {
		if(name != null) 'name' : name
	};

	CreateOrderNameRequest.fromJson(Map<String, dynamic> json) :
		name = json['name'];
	}


class ClientRequest {
	String id;

	ClientRequest({required this.id});

	Map<String, dynamic> toJson() => {
		'id' : id
	};

	ClientRequest.fromJson(Map<String, dynamic> json) :
		id = json['id'] ?? '';
	}


class ClientDto {
	String? id;
	String? name;
	int? clientTypeId;
	int? clientStatusId;
	DateTime? createdAt;
	int? creatorId;
	ClientType? type;
	List<int>? itemIds;

	ClientDto({this.id, this.name, this.clientTypeId, this.clientStatusId, this.createdAt, this.creatorId, this.type, this.itemIds});

	Map<String, dynamic> toJson() => {
		if(id != null) 'id' : id,
 		if(name != null) 'name' : name,
 		if(clientTypeId != null) 'clientTypeId' : clientTypeId,
 		if(clientStatusId != null) 'clientStatusId' : clientStatusId,
 		if(createdAt != null) 'createdAt' : createdAt?.toUtc().toIso8601String(),
 		if(creatorId != null) 'creatorId' : creatorId,
 		if(type != null) 'type' : ClientTypeConverter.toValue(type),
 		if(itemIds != null) 'itemIds' : itemIds
	};

	ClientDto.fromJson(Map<String, dynamic> json) :
		id = json['id'],
		name = json['name'],
		clientTypeId = json['clientTypeId'],
		clientStatusId = json['clientStatusId'],
		createdAt = json['createdAt'] != null ? DateTime.parse(json['createdAt']) : null,
		creatorId = json['creatorId'],
		type = ClientTypeConverter.fromValue(json['type']),
		itemIds = json['itemIds']?.map((int? e) => e ?? 0);
	}



enum ClientType {
  regular,
  administrator,
  provider,
}

class ClientTypeConverter {
	static int? toValue(ClientType? e) {
		if( e == null) return null;
		switch (e) {
			case ClientType.regular: return 1;
			case ClientType.administrator: return 2;
			case ClientType.provider: return 3;
			default: throw ArgumentError('Conversion not supported');
		}
	}

	static ClientType? fromValue(int? n) {
		if( n == null) return null;
		switch (n) {
			case 1: return ClientType.regular;
			case 2: return ClientType.administrator;
			case 3: return ClientType.provider;
			default: throw ArgumentError('Conversion not supported');
		}
	}

}
