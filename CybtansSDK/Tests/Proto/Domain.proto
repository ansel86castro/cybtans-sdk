syntax = "proto3";

package Cybtans.Tests;

message CustomerDto {
	string name = 1;
	string firstLastName = 2;
	string secondLastName = 3;
	guid customerProfileId = 4 [optional = true];
	CustomerProfileDto customerProfile = 5;
	guid tenantId = 6 [optional = true];
	guid id = 7;
	datetime createDate = 8;
	datetime updateDate = 9 [optional = true];
	string creator = 10;
}

message CustomerProfileDto {
	string name = 1;
	guid tenantId = 2 [optional = true];
	guid id = 3;
	datetime createDate = 4;
	datetime updateDate = 5 [optional = true];
	string creator = 6;
}

message CustomerEventDto {
	string fullName = 1;
	guid customerProfileId = 2 [optional = true];
	guid id = 3;
}

message OrderItemDto {
	string productName = 1;
	float price = 2;
	float discount = 3;
	guid orderId = 4;
	guid id = 5;
}

message OrderDto {
	string description = 1;
	guid customerId = 2;
	int32 orderStateId = 3;
	OrderTypeEnum orderType = 4;
	OrderTypeEnum orderTypeNullable = 5 [optional = true];
	OrderStateDto orderState = 6;
	CustomerDto customer = 7;
	repeated OrderItemDto items = 8;
	guid tenantId = 9 [optional = true];
	guid id = 10;
	datetime createDate = 11;
	datetime updateDate = 12 [optional = true];
	string creator = 13;
}

enum OrderTypeEnum {
	Default = 0;
	Normal = 1;
	Shipping = 2;
}

message OrderStateDto {
	string name = 1;
	int32 id = 2;
}



message GetAllRequest {
	string filter = 1 [optional = true];
	string sort = 2 [optional = true];
	int32 skip = 3 [optional = true];
	int32 take = 4 [optional = true];
}


// **************************** START Customer **********************************************

message GetCustomerRequest {
	guid id = 1;
}

message UpdateCustomerRequest {
	guid id = 1;
	CustomerDto value = 2;
}

message DeleteCustomerRequest{
	guid id = 1;
}

message GetAllCustomerResponse {
	repeated CustomerDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

service CustomerService {
	option (prefix) ="api/Customer";

	rpc GetAll(GetAllRequest) returns (GetAllCustomerResponse){		
		option method = "GET";
		
	};

	rpc Get(GetCustomerRequest) returns (CustomerDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CustomerDto) returns (CustomerDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateCustomerRequest) returns (CustomerDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteCustomerRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END Customer **********************************************

// **************************** START CustomerEvent **********************************************

message GetCustomerEventRequest {
	guid id = 1;
}

message UpdateCustomerEventRequest {
	guid id = 1;
	CustomerEventDto value = 2;
}

message DeleteCustomerEventRequest{
	guid id = 1;
}

message GetAllCustomerEventResponse {
	repeated CustomerEventDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

service CustomerEventService {
	option (prefix) ="api/CustomerEvent";

	rpc GetAll(GetAllRequest) returns (GetAllCustomerEventResponse){		
		option method = "GET";
		
	};

	rpc Get(GetCustomerEventRequest) returns (CustomerEventDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(CustomerEventDto) returns (CustomerEventDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateCustomerEventRequest) returns (CustomerEventDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteCustomerEventRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END CustomerEvent **********************************************

// **************************** START Order **********************************************

message GetOrderRequest {
	guid id = 1;
}

message UpdateOrderRequest {
	guid id = 1;
	OrderDto value = 2;
}

message DeleteOrderRequest{
	guid id = 1;
}

message GetAllOrderResponse {
	repeated OrderDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

service OrderService {
	option (prefix) ="api/Order";

	rpc GetAll(GetAllRequest) returns (GetAllOrderResponse){		
		option method = "GET";
		
	};

	rpc Get(GetOrderRequest) returns (OrderDto){	
		option template = "{id}"; 
		option method = "GET";
		
	};

	rpc Create(OrderDto) returns (OrderDto){			
		option method = "POST";
		
	};

	rpc Update(UpdateOrderRequest) returns (OrderDto){			
		option template = "{id}"; 
		option method = "PUT";
		
	};

	rpc Delete(DeleteOrderRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		
	};
}

// **************************** END Order **********************************************

// **************************** START OrderState **********************************************

message GetOrderStateRequest {
	int32 id = 1;
}

message UpdateOrderStateRequest {
	int32 id = 1;
	OrderStateDto value = 2;
}

message DeleteOrderStateRequest{
	int32 id = 1;
}

message GetAllOrderStateResponse {
	repeated OrderStateDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

service OrderStateService {
	option (prefix) ="api/OrderState";

	rpc GetAll(GetAllRequest) returns (GetAllOrderStateResponse){		
		option method = "GET";
		option roles = "admin";
	};

	rpc Get(GetOrderStateRequest) returns (OrderStateDto){	
		option template = "{id}"; 
		option method = "GET";
		option roles = "admin";
	};

	rpc Create(OrderStateDto) returns (OrderStateDto){			
		option method = "POST";
		option roles = "admin";
	};

	rpc Update(UpdateOrderStateRequest) returns (OrderStateDto){			
		option template = "{id}"; 
		option method = "PUT";
		option roles = "admin";
	};

	rpc Delete(DeleteOrderStateRequest) returns (void){
		option template = "{id}"; 
		option method = "DELETE";
		option roles = "admin";
	};
}

// **************************** END OrderState **********************************************