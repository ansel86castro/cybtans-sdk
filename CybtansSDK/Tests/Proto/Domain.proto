
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

syntax = "proto3";

package Cybtans.Tests;

message CustomerDto {
	option (message_description) = "Customer Entity";

	string name = 1 [(required) = true, (field_description) = "Customer's Name"];
	string firstLastName = 2 [(field_description) = "Customer's FirstLastName"];
	string secondLastName = 3 [(field_description) = "Customer's SecondLastName", (deprecated) = true];
	guid customerProfileId = 4 [(optional) = true, (field_description) = "Customer's Profile Id, can be null"];
	CustomerProfileDto customerProfile = 5;
	guid id = 6;
	datetime createDate = 7 [(optional) = true];
	datetime updateDate = 8 [(optional) = true];
}

message CustomerProfileDto {
	string name = 1;
	guid id = 2;
	datetime createDate = 3 [(optional) = true];
	datetime updateDate = 4 [(optional) = true];
}

message CustomerEventDto {
	string fullName = 1;
	guid customerProfileId = 2 [(optional) = true];
	guid id = 3;
}

message OrderItemDto {
	string productName = 1;
	float price = 2;
	float discount = 3 [(optional) = true];
	guid orderId = 4;
	guid productId = 5 [(optional) = true];
	ProductDto product = 6;
	guid id = 7;
}

message ProductDto {
	string name = 1;
	string model = 2;
	guid id = 3;
}

message OrderDto {
	string description = 1;
	guid customerId = 2;
	int32 orderStateId = 3;
	OrderTypeEnum orderType = 4;
	OrderStateDto orderState = 5;
	CustomerDto customer = 6 [(field_description) = "Customer"];
	repeated OrderItemDto items = 7;
	guid id = 8;
	datetime createDate = 9 [(optional) = true];
	datetime updateDate = 10 [(optional) = true];
}

enum OrderTypeEnum {
	option (description) = "Enum Type Description";

	Default = 0 [(description) = "Default"];
	Normal = 1 [(description) = "Normal"];
	Shipping = 2 [(description) = "Shipping"];
}

message OrderStateDto {
	string name = 1;
	int32 id = 2;
}

message ReadOnlyEntityDto {
	string name = 1;
	datetime createDate = 2 [(optional) = true];
	datetime updateDate = 3 [(optional) = true];
	int32 id = 4;
}

message SoftDeleteOrderDto {
	string name = 1;
	bool isDeleted = 2;
	repeated SoftDeleteOrderItemDto items = 3;
	guid id = 4;
	datetime createDate = 5 [(optional) = true];
	datetime updateDate = 6 [(optional) = true];
}

message SoftDeleteOrderItemDto {
	string name = 1;
	bool isDeleted = 2;
	guid softDeleteOrderId = 3;
	guid id = 4;
	datetime createDate = 5 [(optional) = true];
	datetime updateDate = 6 [(optional) = true];
}



message GetAllRequest {
	string filter = 1 [optional = true];
	string sort = 2 [optional = true];
	int32 skip = 3 [optional = true];
	int32 take = 4 [optional = true];
}


// **************************** START Customer **********************************************

message GetCustomerRequest {
	guid id = 1;
}

message UpdateCustomerRequest {
	guid id = 1;
	CustomerDto value = 2 [(ts).partial = true];
}

message DeleteCustomerRequest{
	guid id = 1;
}

message GetAllCustomerResponse {
	repeated CustomerDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateCustomerRequest {
	CustomerDto value = 1 [(ts).partial = true];
}

service CustomerService {
	option (prefix) ="api/Customer";

	rpc GetAll(GetAllRequest) returns (GetAllCustomerResponse){		
		option (method) = "GET";
		option (policy) = "AdminUser";
		option (description) = "Returns a collection of CustomerDto";
		option (graphql).query = "customers";

	};

	rpc Get(GetCustomerRequest) returns (CustomerDto){	
		option (template) = "{id}"; 
		option (method) = "GET";
		option (policy) = "AdminUser";
		option (description) = "Returns one CustomerDto by Id";
		option (graphql).query = "customer";

	};

	rpc Create(CreateCustomerRequest) returns (CustomerDto){			
		option (method) = "POST";
		option (policy) = "AdminUser";
		option (description) = "Creates one CustomerDto";

	};

	rpc Update(UpdateCustomerRequest) returns (CustomerDto){			
		option (template) = "{id}"; 
		option (method) = "PUT";
		option (policy) = "AdminUser";
		option (description) = "Updates one CustomerDto by Id";

	};

	rpc Delete(DeleteCustomerRequest) returns (void){
		option (template) = "{id}"; 
		option (method) = "DELETE";
		option (policy) = "AdminUser";
		option (description) = "Deletes one CustomerDto by Id";

	};
}

// **************************** END Customer **********************************************

// **************************** START CustomerEvent **********************************************

message GetCustomerEventRequest {
	guid id = 1;
}

message UpdateCustomerEventRequest {
	guid id = 1;
	CustomerEventDto value = 2 [(ts).partial = true];
}

message DeleteCustomerEventRequest{
	guid id = 1;
}

message GetAllCustomerEventResponse {
	repeated CustomerEventDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateCustomerEventRequest {
	CustomerEventDto value = 1 [(ts).partial = true];
}

service CustomerEventService {
	option (prefix) ="api/CustomerEvent";

	rpc GetAll(GetAllRequest) returns (GetAllCustomerEventResponse){		
		option (method) = "GET";
		option (authorized) = true;
		option (description) = "Returns a collection of CustomerEventDto";
		option (graphql).query = "customerEvents";

	};

	rpc Get(GetCustomerEventRequest) returns (CustomerEventDto){	
		option (template) = "{id}"; 
		option (method) = "GET";
		option (authorized) = true;
		option (description) = "Returns one CustomerEventDto by Id";
		option (graphql).query = "customerEvent";

	};

	rpc Create(CreateCustomerEventRequest) returns (CustomerEventDto){			
		option (method) = "POST";
		option (authorized) = true;
		option (description) = "Creates one CustomerEventDto";

	};

	rpc Update(UpdateCustomerEventRequest) returns (CustomerEventDto){			
		option (template) = "{id}"; 
		option (method) = "PUT";
		option (authorized) = true;
		option (description) = "Updates one CustomerEventDto by Id";

	};

	rpc Delete(DeleteCustomerEventRequest) returns (void){
		option (template) = "{id}"; 
		option (method) = "DELETE";
		option (authorized) = true;
		option (description) = "Deletes one CustomerEventDto by Id";

	};
}

// **************************** END CustomerEvent **********************************************

// **************************** START Order **********************************************

message GetOrderRequest {
	guid id = 1;
}

message UpdateOrderRequest {
	guid id = 1;
	OrderDto value = 2 [(ts).partial = true];
}

message DeleteOrderRequest{
	guid id = 1;
}

message GetAllOrderResponse {
	repeated OrderDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateOrderRequest {
	OrderDto value = 1 [(ts).partial = true];
}

service OrderService {
	option (prefix) ="api/Order";

	rpc GetAll(GetAllRequest) returns (GetAllOrderResponse){		
		option (method) = "GET";
		option (description) = "Returns a collection of OrderDto";
		option (graphql).query = "orders";

	};

	rpc Get(GetOrderRequest) returns (OrderDto){	
		option (template) = "{id}"; 
		option (method) = "GET";
		option (description) = "Returns one OrderDto by Id";
		option (graphql).query = "order";

	};

	rpc Create(CreateOrderRequest) returns (OrderDto){			
		option (method) = "POST";
		option (description) = "Creates one OrderDto";

	};

	rpc Update(UpdateOrderRequest) returns (OrderDto){			
		option (template) = "{id}"; 
		option (method) = "PUT";
		option (description) = "Updates one OrderDto by Id";

	};

	rpc Delete(DeleteOrderRequest) returns (void){
		option (template) = "{id}"; 
		option (method) = "DELETE";
		option (description) = "Deletes one OrderDto by Id";

	};
}

// **************************** END Order **********************************************

// **************************** START OrderState **********************************************

message GetOrderStateRequest {
	int32 id = 1;
}

message UpdateOrderStateRequest {
	int32 id = 1;
	OrderStateDto value = 2 [(ts).partial = true];
}

message DeleteOrderStateRequest{
	int32 id = 1;
}

message GetAllOrderStateResponse {
	repeated OrderStateDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateOrderStateRequest {
	OrderStateDto value = 1 [(ts).partial = true];
}

service OrderStateService {
	option (prefix) ="api/OrderState";

	rpc GetAll(GetAllRequest) returns (GetAllOrderStateResponse){		
		option (method) = "GET";
		option (roles) = "admin";
		option (description) = "Returns a collection of OrderStateDto";
		option (graphql).query = "orderStates";

	};

	rpc Get(GetOrderStateRequest) returns (OrderStateDto){	
		option (template) = "{id}"; 
		option (method) = "GET";
		option (roles) = "admin";
		option (description) = "Returns one OrderStateDto by Id";
		option (graphql).query = "orderState";

	};

	rpc Create(CreateOrderStateRequest) returns (OrderStateDto){			
		option (method) = "POST";
		option (roles) = "admin";
		option (description) = "Creates one OrderStateDto";

	};

	rpc Update(UpdateOrderStateRequest) returns (OrderStateDto){			
		option (template) = "{id}"; 
		option (method) = "PUT";
		option (roles) = "admin";
		option (description) = "Updates one OrderStateDto by Id";

	};

	rpc Delete(DeleteOrderStateRequest) returns (void){
		option (template) = "{id}"; 
		option (method) = "DELETE";
		option (roles) = "admin";
		option (description) = "Deletes one OrderStateDto by Id";

	};
}

// **************************** END OrderState **********************************************

// **************************** START ReadOnlyEntity **********************************************

message GetReadOnlyEntityRequest {
	int32 id = 1;
}

message GetAllReadOnlyEntityResponse {
	repeated ReadOnlyEntityDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

service ReadOnlyEntityService {
	option (prefix) ="api/ReadOnlyEntity";

	rpc GetAll(GetAllRequest) returns (GetAllReadOnlyEntityResponse){		
		option method = "GET";
		option (roles) = "admin";
		option (description) = "Returns a collection of ReadOnlyEntityDto";
		option (graphql).query = "readOnlyEntities";

	};

	rpc Get(GetReadOnlyEntityRequest) returns (ReadOnlyEntityDto){	
		option template = "{id}"; 
		option method = "GET";
		option (roles) = "admin";
		option (description) = "Returns one ReadOnlyEntityDto by Id";
		option (graphql).query = "readOnlyEntity";

	};	
}

// **************************** END ReadOnlyEntity **********************************************

// **************************** START SoftDeleteOrder **********************************************

message GetSoftDeleteOrderRequest {
	guid id = 1;
}

message UpdateSoftDeleteOrderRequest {
	guid id = 1;
	SoftDeleteOrderDto value = 2 [(ts).partial = true];
}

message DeleteSoftDeleteOrderRequest{
	guid id = 1;
}

message GetAllSoftDeleteOrderResponse {
	repeated SoftDeleteOrderDto items = 1;
	int64 page = 2;
	int64 totalPages = 3;
	int64 totalCount = 4;
}

message CreateSoftDeleteOrderRequest {
	SoftDeleteOrderDto value = 1 [(ts).partial = true];
}

service SoftDeleteOrderService {
	option (prefix) ="api/SoftDeleteOrder";

	rpc GetAll(GetAllRequest) returns (GetAllSoftDeleteOrderResponse){		
		option (method) = "GET";
		option (description) = "Returns a collection of SoftDeleteOrderDto";
		option (graphql).query = "softDeleteOrders";

	};

	rpc Get(GetSoftDeleteOrderRequest) returns (SoftDeleteOrderDto){	
		option (template) = "{id}"; 
		option (method) = "GET";
		option (description) = "Returns one SoftDeleteOrderDto by Id";
		option (graphql).query = "softDeleteOrder";

	};

	rpc Create(CreateSoftDeleteOrderRequest) returns (SoftDeleteOrderDto){			
		option (method) = "POST";
		option (description) = "Creates one SoftDeleteOrderDto";

	};

	rpc Update(UpdateSoftDeleteOrderRequest) returns (SoftDeleteOrderDto){			
		option (template) = "{id}"; 
		option (method) = "PUT";
		option (description) = "Updates one SoftDeleteOrderDto by Id";

	};

	rpc Delete(DeleteSoftDeleteOrderRequest) returns (void){
		option (template) = "{id}"; 
		option (method) = "DELETE";
		option (description) = "Deletes one SoftDeleteOrderDto by Id";

	};
}

// **************************** END SoftDeleteOrder **********************************************