
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using Cybtans.Tests.Clients;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Cybtans.AspNetCore;

using mds = global::Cybtans.Tests.Models;
using Microsoft.AspNetCore.Authorization;

namespace Cybtans.Tests.Controllers
{
	/// <summary>
	/// Order's Service
	/// </summary>
	[System.ComponentModel.Description("Order's Service")]
	[Route("api/Order")]
	[ApiController]
	public partial class OrderServiceController : ControllerBase
	{
		private readonly IOrderServiceClient _service;
		private readonly ILogger<OrderServiceController> _logger;
		
		public OrderServiceController(IOrderServiceClient service,  ILogger<OrderServiceController> logger)
		{
			_service = service;
			_logger = logger;
		}
		
		/// <summary>
		/// Hellow; "Func"
		/// </summary>
		[System.ComponentModel.Description("Hellow; \"Func\"")]
		[ProducesResponseType(404)]
		[ProducesResponseType(500)]
		[AllowAnonymous]
		[HttpGet("foo")]
		public async Task Foo()
		{
			_logger.LogInformation("Executing {Action}", nameof(Foo));
			
			await _service.Foo().ConfigureAwait(false);
		}
		
		[HttpGet("baar")]
		public async Task Baar()
		{
			_logger.LogInformation("Executing {Action}", nameof(Baar));
			
			await _service.Baar().ConfigureAwait(false);
		}
		
		[HttpGet("test")]
		public async Task Test()
		{
			_logger.LogInformation("Executing {Action}", nameof(Test));
			
			await _service.Test().ConfigureAwait(false);
		}
		
		[HttpGet("arg")]
		public async Task Argument()
		{
			_logger.LogInformation("Executing {Action}", nameof(Argument));
			
			await _service.Argument().ConfigureAwait(false);
		}
		
		/// <summary>
		/// Upload an image to the server
		/// </summary>
		[System.ComponentModel.Description("Upload an image to the server")]
		[HttpPost("upload")]
		public async Task<mds::UploadImageResponse> UploadImage([FromServices] global::Cybtans.Common.IHttpContentSerializer serializer = null)
		{
						
			mds::UploadImageRequest request;
			
			if (Request.Headers.TryGetValue("x-req-contenttype", out var value))
			{
				var objBase64 = Request.Headers["x-req-obj"][0];
			    request = serializer != null && value == serializer.ContentType ? serializer.FromUtf8Bytes<mds::UploadImageRequest>(Convert.FromBase64String(objBase64)) : System.Text.Json.JsonSerializer.Deserialize<mds::UploadImageRequest>(Convert.FromBase64String(objBase64),new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
			}
			else
			{
				request = new ();
			}
			
			request.Image = Request.Body;
			_logger.LogInformation("Executing {Action}", nameof(UploadImage));
			
			var result = await _service.UploadImage(request).ConfigureAwait(false);
			return result;
		}
		
		[HttpPost("{id}/upload")]
		public async Task<mds::UploadStreamResponse> UploadStreamById(string id, [FromServices] global::Cybtans.Common.IHttpContentSerializer serializer = null)
		{
						
			mds::UploadStreamByIdRequest request;
			
			if (Request.Headers.TryGetValue("x-req-contenttype", out var value))
			{
				var objBase64 = Request.Headers["x-req-obj"][0];
			    request = serializer != null && value == serializer.ContentType ? serializer.FromUtf8Bytes<mds::UploadStreamByIdRequest>(Convert.FromBase64String(objBase64)) : System.Text.Json.JsonSerializer.Deserialize<mds::UploadStreamByIdRequest>(Convert.FromBase64String(objBase64),new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
			}
			else
			{
				request = new ();
			}
			
			request.Data = Request.Body;
			request.Id = id;
			
			_logger.LogInformation("Executing {Action}", nameof(UploadStreamById));
			
			var result = await _service.UploadStreamById(request).ConfigureAwait(false);
			return result;
		}
		
		[HttpPost("ByteStream")]
		public async Task<mds::UploadStreamResponse> UploadStream()
		{
			var request = Request.Body;
			_logger.LogInformation("Executing {Action}", nameof(UploadStream));
			
			var result = await _service.UploadStream(request).ConfigureAwait(false);
			return result;
		}
		
		[HttpGet("download")]
		public async Task<IActionResult> DownloadImage([FromQuery]mds::DownloadImageRequest request, [FromServices] global::Cybtans.Common.IHttpContentSerializer serializer = null)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(DownloadImage), request);
			
			var result = await _service.DownloadImage(request).ConfigureAwait(false);
			
			if(Request.Headers.ContainsKey("Accept") && System.Net.Http.Headers.MediaTypeHeaderValue.TryParse(Request.Headers["Accept"], out var mimeType) && mimeType?.MediaType == "application/x-cybtans")
			{				
				return new ObjectResult(result);
			}
			
			if (Request.Headers.TryGetValue("x-req-accept", out var value))
			{
				if (serializer != null && serializer.ContentType == value)
				{
			        Response.Headers.Add("x-res-contenttype", serializer.ContentType);
			        Response.Headers.Add("x-res-obj", Convert.ToBase64String(serializer.ToUtf8Bytes(new
					{
						result.FileName,
						result.ContentType
					})));
				}
				else if(value == "application/json")
			    {
			        Response.Headers.Add("x-res-contenttype", "application/json");
			        Response.Headers.Add("x-res-obj", Convert.ToBase64String(System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(new
			        {
			            result.FileName,
			            result.ContentType
			        })));
			    }
			}
			return new FileStreamResult(result.Image, result.ContentType) { FileDownloadName = result.FileName };
		}
		
		[HttpGet("{param1}multipath/{param2}")]
		public async Task GetMultiPath(string param1, string param2, [FromQuery]mds::MultiPathRequest request)
		{
			request.Param1 = param1;
			request.Param2 = param2;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetMultiPath), request);
			
			await _service.GetMultiPath(request).ConfigureAwait(false);
		}
		
		[HttpPost("{orderId}/notify/{userId}")]
		public async Task SendNotification(string orderId, string userId, [FromBody]mds::OrderNotification request)
		{
			request.OrderId = orderId;
			request.UserId = userId;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(SendNotification), request);
			
			await _service.SendNotification(request).ConfigureAwait(false);
		}
		
		[HttpGet("names")]
		public async Task<mds::GetAllNamesResponse> GetAllNames()
		{
			_logger.LogInformation("Executing {Action}", nameof(GetAllNames));
			
			var result = await _service.GetAllNames().ConfigureAwait(false);
			return result;
		}
		
		[HttpGet("names/{id}")]
		public async Task<mds::OrderNamesDto> GetOrderName(string id, [FromQuery]mds::GetOrderNameRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetOrderName), request);
			
			var result = await _service.GetOrderName(request).ConfigureAwait(false);
			return result;
		}
		
		[HttpPost("names")]
		public async Task<mds::OrderNamesDto> CreateOrderName([FromBody]mds::CreateOrderNameRequest request)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(CreateOrderName), request);
			
			var result = await _service.CreateOrderName(request).ConfigureAwait(false);
			return result;
		}
		
		/// <summary>
		/// Returns a collection of OrderDto
		/// </summary>
		[System.ComponentModel.Description("Returns a collection of OrderDto")]
		[HttpGet]
		public async Task<mds::GetAllOrderResponse> GetAll([FromQuery]mds::GetAllRequest request)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetAll), request);
			
			var result = await _service.GetAll(request).ConfigureAwait(false);
			return result;
		}
		
		/// <summary>
		/// Returns one OrderDto by Id
		/// </summary>
		[System.ComponentModel.Description("Returns one OrderDto by Id")]
		[HttpGet("{id}")]
		public async Task<mds::OrderDto> Get(Guid id, [FromQuery]mds::GetOrderRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Get), request);
			
			var result = await _service.Get(request).ConfigureAwait(false);
			return result;
		}
		
		/// <summary>
		/// Creates one OrderDto
		/// </summary>
		[System.ComponentModel.Description("Creates one OrderDto")]
		[HttpPost]
		public async Task<mds::OrderDto> Create([FromBody]mds::CreateOrderRequest request)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(Create), request);
			
			var result = await _service.Create(request).ConfigureAwait(false);
			return result;
		}
		
		/// <summary>
		/// Updates one OrderDto by Id
		/// </summary>
		[System.ComponentModel.Description("Updates one OrderDto by Id")]
		[HttpPut("{id}")]
		public async Task<mds::OrderDto> Update(Guid id, [FromBody]mds::UpdateOrderRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Update), request);
			
			var result = await _service.Update(request).ConfigureAwait(false);
			return result;
		}
		
		/// <summary>
		/// Deletes one OrderDto by Id
		/// </summary>
		[System.ComponentModel.Description("Deletes one OrderDto by Id")]
		[HttpDelete("{id}")]
		public async Task Delete(Guid id, [FromQuery]mds::DeleteOrderRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Delete), request);
			
			await _service.Delete(request).ConfigureAwait(false);
		}
	}

}
