
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using Cybtans.Tests.Clients;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using mds = global::Cybtans.Tests.Models;
using Microsoft.AspNetCore.Authorization;

namespace Cybtans.Tests.Controllers
{
	[Authorize]
	[Route("api/clients")]
	[ApiController]
	public partial class ClientServiceController : ControllerBase
	{
		private readonly IClientServiceClient _service;
		private readonly ILogger<ClientServiceController> _logger;
		private readonly global::Microsoft.AspNetCore.Authorization.IAuthorizationService _authorizationService;
		
		public ClientServiceController(IClientServiceClient service,  ILogger<ClientServiceController> logger, global::Microsoft.AspNetCore.Authorization.IAuthorizationService authorizationService)
		{
			_service = service;
			_logger = logger;
			_authorizationService = authorizationService;
		}
		
		[HttpGet("{id}")]
		public async Task<mds::ClientDto> GetClient(Guid id, [FromQuery]mds::ClientRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetClient), request);
			
			var authRequestResult = await _authorizationService.AuthorizeAsync(User, request, "ClientPolicy").ConfigureAwait(false);
			if (!authRequestResult.Succeeded)
			{
			    throw new UnauthorizedAccessException($"Request Authorization Failed: { string.Join(", ", authRequestResult.Failure.FailedRequirements) }");
			}
			
			var result = await _service.GetClient(request).ConfigureAwait(false);
			if (result != null)
			{
			    var authResult = await _authorizationService.AuthorizeAsync(User, result, "ClientCreator").ConfigureAwait(false);
			    if (!authResult.Succeeded)
			    {
			        throw new UnauthorizedAccessException($"Result Authorization Failed: { string.Join(", ", authResult.Failure.FailedRequirements) }");
			    }
			}
			
			return result;
		}
		
		[HttpGet("client2/{id}")]
		public async Task<mds::ClientDto> GetClient2(Guid id, [FromQuery]mds::ClientRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetClient2), request);
			
			var authRequestResult = await _authorizationService.AuthorizeAsync(User, request, "ClientPolicy").ConfigureAwait(false);
			if (!authRequestResult.Succeeded)
			{
			    throw new UnauthorizedAccessException($"Request Authorization Failed: { string.Join(", ", authRequestResult.Failure.FailedRequirements) }");
			}
			
			var result = await _service.GetClient2(request).ConfigureAwait(false);
			return result;
		}
		
		[HttpGet("client3/{id}")]
		public async Task<mds::ClientDto> GetClient3(Guid id, [FromQuery]mds::ClientRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetClient3), request);
			
			var result = await _service.GetClient3(request).ConfigureAwait(false);
			if (result != null)
			{
			    var authResult = await _authorizationService.AuthorizeAsync(User, result, "ClientCreator").ConfigureAwait(false);
			    if (!authResult.Succeeded)
			    {
			        throw new UnauthorizedAccessException($"Result Authorization Failed: { string.Join(", ", authResult.Failure.FailedRequirements) }");
			    }
			}
			
			return result;
		}
	}

}
