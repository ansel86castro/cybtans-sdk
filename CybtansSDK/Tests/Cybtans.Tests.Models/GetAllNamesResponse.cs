
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using System;
using Cybtans.Serialization;
using System.Collections.Generic;

namespace Cybtans.Tests.Models
{
	public class GetAllNamesResponse : IReflectorMetadataProvider
	{
		private static readonly GetAllNamesResponseAccesor __accesor = new GetAllNamesResponseAccesor();
		
		public List<OrderNamesDto> Items {get; set;}
		
		public IReflectorMetadata GetAccesor()
		{
			return __accesor;
		}
		public static implicit operator GetAllNamesResponse(List<OrderNamesDto> items)
		{
			return new GetAllNamesResponse { Items = items };
		}
	
	
		#region GetAllNamesResponse  Accesor
		public sealed class GetAllNamesResponseAccesor : IReflectorMetadata
		{
			public const int Items = 1;
			private readonly int[] _props = new []
			{
				Items
			};
			
			public int[] GetPropertyCodes() => _props;
			
			public string GetPropertyName(int propertyCode)
			{
			    return propertyCode switch
			    {
			       Items => "Items",
			
			        _ => throw new InvalidOperationException("property code not supported"),
			    };
			}
			
			public int GetPropertyCode(string propertyName)
			{
			    return propertyName switch
			    {
			        "Items" => Items,
			
			        _ => -1,
			    };
			}
			
			public Type GetPropertyType(int propertyCode)
			{
			    return propertyCode switch
			    {
			        Items => typeof(List<OrderNamesDto>),
			
			        _ => throw new InvalidOperationException("property code not supported"),
			    };
			}
			       
			public object GetValue(object target, int propertyCode)
			{
			    GetAllNamesResponse obj = (GetAllNamesResponse)target;
			    return propertyCode switch
			    {
			        Items => obj.Items,
			
			        _ => throw new InvalidOperationException("property code not supported"),
			    };
			}
			
			public void SetValue(object target, int propertyCode, object value)
			{
			    GetAllNamesResponse obj = (GetAllNamesResponse)target;
			    switch (propertyCode)
			    {
			        case Items:  obj.Items = (List<OrderNamesDto>)value;break;
			
			        default: throw new InvalidOperationException("property code not supported");
			    }
			}
		
		}
		#endregion
	
	
	}

}
