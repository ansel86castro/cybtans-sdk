
//*****************************************************
// <auto-generated>
//   Generated by the cybtans protocol buffer compiler.  DO NOT EDIT!
//   Powered By Cybtans    
// </auto-generated>
//******************************************************

using Cybtans.Tests.Services;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using mds = global::Cybtans.Tests.Models;

namespace Cybtans.Tests.Controllers
{
	[Route("api/Customer")]
	[ApiController]
	public partial class CustomerServiceController : ControllerBase
	{
		private readonly ICustomerService _service;
		private readonly ILogger<CustomerServiceController> _logger;
		private readonly global::Cybtans.AspNetCore.Interceptors.IActionInterceptor _interceptor;
		
		public CustomerServiceController(ICustomerService service,  ILogger<CustomerServiceController> logger, global::Cybtans.AspNetCore.Interceptors.IActionInterceptor interceptor = null)
		{
			_service = service;
			_logger = logger;
			_interceptor = interceptor;
		}
		
		/// <summary>
		/// Returns a collection of CustomerDto
		/// </summary>
		[System.ComponentModel.Description("Returns a collection of CustomerDto")]
		[HttpGet]
		public async Task<mds::GetAllCustomerResponse> GetAll([FromQuery]mds::GetAllRequest request)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(GetAll), request);
			
			if(_interceptor != null )
			{
			    await _interceptor.Handle(request, nameof(GetAll)).ConfigureAwait(false);
			}
			
			return await _service.GetAll(request).ConfigureAwait(false);
		}
		
		/// <summary>
		/// Returns one CustomerDto by Id
		/// </summary>
		[System.ComponentModel.Description("Returns one CustomerDto by Id")]
		[HttpGet("{id}")]
		public async Task<mds::CustomerDto> Get(Guid id, [FromQuery]mds::GetCustomerRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Get), request);
			
			if(_interceptor != null )
			{
			    await _interceptor.Handle(request, nameof(Get)).ConfigureAwait(false);
			}
			
			return await _service.Get(request).ConfigureAwait(false);
		}
		
		/// <summary>
		/// Creates one CustomerDto
		/// </summary>
		[System.ComponentModel.Description("Creates one CustomerDto")]
		[HttpPost]
		public async Task<mds::CustomerDto> Create([FromBody]mds::CreateCustomerRequest request)
		{
			_logger.LogInformation("Executing {Action} {Message}", nameof(Create), request);
			
			if(_interceptor != null )
			{
			    await _interceptor.Handle(request, nameof(Create)).ConfigureAwait(false);
			}
			
			return await _service.Create(request).ConfigureAwait(false);
		}
		
		/// <summary>
		/// Updates one CustomerDto by Id
		/// </summary>
		[System.ComponentModel.Description("Updates one CustomerDto by Id")]
		[HttpPut("{id}")]
		public async Task<mds::CustomerDto> Update(Guid id, [FromBody]mds::UpdateCustomerRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Update), request);
			
			if(_interceptor != null )
			{
			    await _interceptor.Handle(request, nameof(Update)).ConfigureAwait(false);
			}
			
			return await _service.Update(request).ConfigureAwait(false);
		}
		
		/// <summary>
		/// Deletes one CustomerDto by Id
		/// </summary>
		[System.ComponentModel.Description("Deletes one CustomerDto by Id")]
		[HttpDelete("{id}")]
		public async Task Delete(Guid id, [FromQuery]mds::DeleteCustomerRequest request)
		{
			request.Id = id;
			
			_logger.LogInformation("Executing {Action} {Message}", nameof(Delete), request);
			
			if(_interceptor != null )
			{
			    await _interceptor.Handle(request, nameof(Delete)).ConfigureAwait(false);
			}
			
			await _service.Delete(request).ConfigureAwait(false);
		}
	}

}
